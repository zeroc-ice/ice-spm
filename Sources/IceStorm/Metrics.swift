//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice class `MXTopicMetrics`.
public struct MXTopicMetricsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::Metrics", "::IceMX::TopicMetrics"]
    public static let staticId = "::IceMX::TopicMetrics"
}

/// Traits for Slice class `MXSubscriberMetrics`.
public struct MXSubscriberMetricsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::Metrics", "::IceMX::SubscriberMetrics"]
    public static let staticId = "::IceMX::SubscriberMetrics"
}

/// :nodoc:
public class MXTopicMetrics_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MXTopicMetrics.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceMX_TopicMetrics() -> Ice.ValueTypeResolver {
        return MXTopicMetrics_TypeResolver()
    }
}

/// Provides information on IceStorm topics.
open class MXTopicMetrics: Ice.MXMetrics {
    /// Number of events published on the topic by publishers.
    public var published: Swift.Int64 = 0
    /// Number of events forwarded on the topic by IceStorm topic links.
    public var forwarded: Swift.Int64 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, published: Swift.Int64, forwarded: Swift.Int64) {
        self.published = published
        self.forwarded = forwarded
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXTopicMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXTopicMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.published = try istr.read()
        self.forwarded = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MXTopicMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.published)
        ostr.write(self.forwarded)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXSubscriberMetrics_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MXSubscriberMetrics.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceMX_SubscriberMetrics() -> Ice.ValueTypeResolver {
        return MXSubscriberMetrics_TypeResolver()
    }
}

/// Provides information on IceStorm subscribers.
open class MXSubscriberMetrics: Ice.MXMetrics {
    /// Number of queued events.
    public var queued: Swift.Int32 = 0
    /// Number of outstanding events.
    public var outstanding: Swift.Int32 = 0
    /// Number of forwarded events.
    public var delivered: Swift.Int64 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, queued: Swift.Int32, outstanding: Swift.Int32, delivered: Swift.Int64) {
        self.queued = queued
        self.outstanding = outstanding
        self.delivered = delivered
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXSubscriberMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXSubscriberMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.queued = try istr.read()
        self.outstanding = try istr.read()
        self.delivered = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MXSubscriberMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.queued)
        ostr.write(self.outstanding)
        ostr.write(self.delivered)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}
