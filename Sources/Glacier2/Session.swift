//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// :nodoc:
public class CannotCreateSessionException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CannotCreateSessionException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Glacier2_CannotCreateSessionException() -> Ice.UserExceptionTypeResolver {
        return CannotCreateSessionException_TypeResolver()
    }
}

/// This exception is raised if an attempt to create a new session failed.
open class CannotCreateSessionException: Ice.UserException {
    /// The reason why session creation has failed.
    public var reason: Swift.String = ""
    var _slicedData: Ice.SlicedData?

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Glacier2::CannotCreateSessionException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CannotCreateSessionException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }

    /// Returns the sliced data if the exception has a preserved-slice base class and has been
    /// sliced during un-marshaling, nil is returned otherwise.
    ///
    /// - returns: `Ice.SlicedData` - The sliced data.
    open override func ice_getSlicedData() -> Ice.SlicedData? {
        return _slicedData
    }

    open override func _iceRead(from istr: Ice.InputStream) throws {
        istr.startException()
        try _iceReadImpl(from: istr)
        _slicedData = try istr.endException(preserve: true)
    }

    open override func _iceWrite(to ostr: Ice.OutputStream) {
        ostr.startException(data: _slicedData)
        _iceWriteImpl(to: ostr)
        ostr.endException()
    }
}

/// Traits for Slice interface `Session`.
public struct SessionTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::Session", "::Ice::Object"]
    public static let staticId = "::Glacier2::Session"
}

/// Traits for Slice interface `StringSet`.
public struct StringSetTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::StringSet", "::Ice::Object"]
    public static let staticId = "::Glacier2::StringSet"
}

/// Traits for Slice interface `IdentitySet`.
public struct IdentitySetTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::IdentitySet", "::Ice::Object"]
    public static let staticId = "::Glacier2::IdentitySet"
}

/// Traits for Slice interface `SessionControl`.
public struct SessionControlTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SessionControl", "::Ice::Object"]
    public static let staticId = "::Glacier2::SessionControl"
}

/// Traits for Slice interface `SessionManager`.
public struct SessionManagerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SessionManager", "::Ice::Object"]
    public static let staticId = "::Glacier2::SessionManager"
}

/// Traits for Slice interface `SSLSessionManager`.
public struct SSLSessionManagerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SSLSessionManager", "::Ice::Object"]
    public static let staticId = "::Glacier2::SSLSessionManager"
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// SessionPrx Methods:
///
///  - destroy: Destroy the session.
///
///  - destroyAsync: Destroy the session.
public protocol SessionPrx: Ice.ObjectPrx {}

private final class SessionPrxI: Ice.ObjectPrxI, SessionPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SessionPrx? {
    return try SessionPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionPrx.Protocol, facet: Swift.String? = nil) -> SessionPrx {
    return SessionPrxI.uncheckedCast(prx: prx, facet: facet) as SessionPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SessionPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SessionPrx.Protocol) -> Swift.String {
    return SessionTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionPrx?` - The extracted proxy
    func read(_ type: SessionPrx.Protocol) throws -> SessionPrx? {
        return try read() as SessionPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionPrx.Protocol) throws -> SessionPrx? {
        return try read(tag: tag) as SessionPrxI?
    }
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// SessionPrx Methods:
///
///  - destroy: Destroy the session.
///
///  - destroyAsync: Destroy the session.
public extension SessionPrx {
    /// Destroy the session. This is called automatically when the router is destroyed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroy",
                          mode: .Normal,
                          context: context)
    }

    /// Destroy the session. This is called automatically when the router is destroyed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// An object for managing the set of identity constraints for specific
/// parts of object identity on a
/// Session.
///
/// StringSetPrx Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - addAsync: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - removeAsync: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
///
///  - getAsync: Returns a sequence of strings describing the constraints in this set.
public protocol StringSetPrx: Ice.ObjectPrx {}

private final class StringSetPrxI: Ice.ObjectPrxI, StringSetPrx {
    public override class func ice_staticId() -> Swift.String {
        return StringSetTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `StringSetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `StringSetPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: StringSetPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> StringSetPrx? {
    return try StringSetPrxI.checkedCast(prx: prx, facet: facet, context: context) as StringSetPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `StringSetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `StringSetPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: StringSetPrx.Protocol, facet: Swift.String? = nil) -> StringSetPrx {
    return StringSetPrxI.uncheckedCast(prx: prx, facet: facet) as StringSetPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `StringSetPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: StringSetPrx.Protocol) -> Swift.String {
    return StringSetTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `StringSetPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `StringSetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `StringSetPrx?` - The extracted proxy
    func read(_ type: StringSetPrx.Protocol) throws -> StringSetPrx? {
        return try read() as StringSetPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `StringSetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `StringSetPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: StringSetPrx.Protocol) throws -> StringSetPrx? {
        return try read(tag: tag) as StringSetPrxI?
    }
}

/// An object for managing the set of identity constraints for specific
/// parts of object identity on a
/// Session.
///
/// StringSetPrx Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - addAsync: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - removeAsync: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
///
///  - getAsync: Returns a sequence of strings describing the constraints in this set.
public extension StringSetPrx {
    /// Add a sequence of strings to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func add(_ iceP_additions: Ice.StringSeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "add",
                          mode: .Idempotent,
                          write: { ostr in
                              ostr.write(iceP_additions)
                          },
                          context: context)
    }

    /// Add a sequence of strings to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func addAsync(_ iceP_additions: Ice.StringSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "add",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      ostr.write(iceP_additions)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Remove a sequence of strings from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func remove(_ iceP_deletions: Ice.StringSeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "remove",
                          mode: .Idempotent,
                          write: { ostr in
                              ostr.write(iceP_deletions)
                          },
                          context: context)
    }

    /// Remove a sequence of strings from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func removeAsync(_ iceP_deletions: Ice.StringSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "remove",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      ostr.write(iceP_deletions)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Returns a sequence of strings describing the constraints in this
    /// set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.StringSeq` - The sequence of strings for this set.
    func `get`(context: Ice.Context? = nil) throws -> Ice.StringSeq {
        return try _impl._invoke(operation: "get",
                                 mode: .Idempotent,
                                 read: { istr in
                                     let iceP_returnValue: Ice.StringSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Returns a sequence of strings describing the constraints in this
    /// set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.StringSeq>` - The result of the operation
    func getAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.StringSeq> {
        return _impl._invokeAsync(operation: "get",
                                  mode: .Idempotent,
                                  read: { istr in
                                      let iceP_returnValue: Ice.StringSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// An object for managing the set of object identity constraints on a
/// Session.
///
/// IdentitySetPrx Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - addAsync: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - removeAsync: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
///
///  - getAsync: Returns a sequence of identities describing the constraints in this set.
public protocol IdentitySetPrx: Ice.ObjectPrx {}

private final class IdentitySetPrxI: Ice.ObjectPrxI, IdentitySetPrx {
    public override class func ice_staticId() -> Swift.String {
        return IdentitySetTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `IdentitySetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `IdentitySetPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: IdentitySetPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> IdentitySetPrx? {
    return try IdentitySetPrxI.checkedCast(prx: prx, facet: facet, context: context) as IdentitySetPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `IdentitySetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `IdentitySetPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: IdentitySetPrx.Protocol, facet: Swift.String? = nil) -> IdentitySetPrx {
    return IdentitySetPrxI.uncheckedCast(prx: prx, facet: facet) as IdentitySetPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `IdentitySetPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: IdentitySetPrx.Protocol) -> Swift.String {
    return IdentitySetTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `IdentitySetPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `IdentitySetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IdentitySetPrx?` - The extracted proxy
    func read(_ type: IdentitySetPrx.Protocol) throws -> IdentitySetPrx? {
        return try read() as IdentitySetPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `IdentitySetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IdentitySetPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: IdentitySetPrx.Protocol) throws -> IdentitySetPrx? {
        return try read(tag: tag) as IdentitySetPrxI?
    }
}

/// An object for managing the set of object identity constraints on a
/// Session.
///
/// IdentitySetPrx Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - addAsync: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - removeAsync: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
///
///  - getAsync: Returns a sequence of identities describing the constraints in this set.
public extension IdentitySetPrx {
    /// Add a sequence of Ice identities to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func add(_ iceP_additions: Ice.IdentitySeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "add",
                          mode: .Idempotent,
                          write: { ostr in
                              Ice.IdentitySeqHelper.write(to: ostr, value: iceP_additions)
                          },
                          context: context)
    }

    /// Add a sequence of Ice identities to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func addAsync(_ iceP_additions: Ice.IdentitySeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "add",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      Ice.IdentitySeqHelper.write(to: ostr, value: iceP_additions)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Remove a sequence of identities from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func remove(_ iceP_deletions: Ice.IdentitySeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "remove",
                          mode: .Idempotent,
                          write: { ostr in
                              Ice.IdentitySeqHelper.write(to: ostr, value: iceP_deletions)
                          },
                          context: context)
    }

    /// Remove a sequence of identities from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func removeAsync(_ iceP_deletions: Ice.IdentitySeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "remove",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      Ice.IdentitySeqHelper.write(to: ostr, value: iceP_deletions)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Returns a sequence of identities describing the constraints in this
    /// set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.IdentitySeq` - The sequence of Ice identities for this set.
    func `get`(context: Ice.Context? = nil) throws -> Ice.IdentitySeq {
        return try _impl._invoke(operation: "get",
                                 mode: .Idempotent,
                                 read: { istr in
                                     let iceP_returnValue: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Returns a sequence of identities describing the constraints in this
    /// set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.IdentitySeq>` - The result of the operation
    func getAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.IdentitySeq> {
        return _impl._invokeAsync(operation: "get",
                                  mode: .Idempotent,
                                  read: { istr in
                                      let iceP_returnValue: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// An administrative session control object, which is tied to the
/// lifecycle of a Session.
///
/// SessionControlPrx Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - categoriesAsync: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - adapterIdsAsync: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - identitiesAsync: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - getSessionTimeoutAsync: Get the session timeout.
///
///  - destroy: Destroy the associated session.
///
///  - destroyAsync: Destroy the associated session.
public protocol SessionControlPrx: Ice.ObjectPrx {}

private final class SessionControlPrxI: Ice.ObjectPrxI, SessionControlPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionControlTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionControlPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionControlPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionControlPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SessionControlPrx? {
    return try SessionControlPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionControlPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionControlPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionControlPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionControlPrx.Protocol, facet: Swift.String? = nil) -> SessionControlPrx {
    return SessionControlPrxI.uncheckedCast(prx: prx, facet: facet) as SessionControlPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SessionControlPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SessionControlPrx.Protocol) -> Swift.String {
    return SessionControlTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionControlPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionControlPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionControlPrx?` - The extracted proxy
    func read(_ type: SessionControlPrx.Protocol) throws -> SessionControlPrx? {
        return try read() as SessionControlPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionControlPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionControlPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionControlPrx.Protocol) throws -> SessionControlPrx? {
        return try read(tag: tag) as SessionControlPrxI?
    }
}

/// An administrative session control object, which is tied to the
/// lifecycle of a Session.
///
/// SessionControlPrx Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - categoriesAsync: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - adapterIdsAsync: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - identitiesAsync: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - getSessionTimeoutAsync: Get the session timeout.
///
///  - destroy: Destroy the associated session.
///
///  - destroyAsync: Destroy the associated session.
public extension SessionControlPrx {
    /// Access the object that manages the allowable categories
    /// for object identities for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object.
    func categories(context: Ice.Context? = nil) throws -> StringSetPrx? {
        return try _impl._invoke(operation: "categories",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Access the object that manages the allowable categories
    /// for object identities for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<StringSetPrx?>` - The result of the operation
    func categoriesAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<StringSetPrx?> {
        return _impl._invokeAsync(operation: "categories",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Access the object that manages the allowable adapter identities
    /// for objects for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object.
    func adapterIds(context: Ice.Context? = nil) throws -> StringSetPrx? {
        return try _impl._invoke(operation: "adapterIds",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Access the object that manages the allowable adapter identities
    /// for objects for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<StringSetPrx?>` - The result of the operation
    func adapterIdsAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<StringSetPrx?> {
        return _impl._invokeAsync(operation: "adapterIds",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Access the object that manages the allowable object identities
    /// for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `IdentitySetPrx?` - An IdentitySet object.
    func identities(context: Ice.Context? = nil) throws -> IdentitySetPrx? {
        return try _impl._invoke(operation: "identities",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: IdentitySetPrx? = try istr.read(IdentitySetPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Access the object that manages the allowable object identities
    /// for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<IdentitySetPrx?>` - The result of the operation
    func identitiesAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<IdentitySetPrx?> {
        return _impl._invokeAsync(operation: "identities",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: IdentitySetPrx? = try istr.read(IdentitySetPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the session timeout.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32` - The timeout.
    func getSessionTimeout(context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "getSessionTimeout",
                                 mode: .Idempotent,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Get the session timeout.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func getSessionTimeoutAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "getSessionTimeout",
                                  mode: .Idempotent,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Destroy the associated session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroy",
                          mode: .Normal,
                          context: context)
    }

    /// Destroy the associated session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// The session manager for username/password authenticated users that
/// is responsible for managing Session objects. New session objects
/// are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application,
/// no client-visible sessions are passed to the client.
///
/// SessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public protocol SessionManagerPrx: Ice.ObjectPrx {}

private final class SessionManagerPrxI: Ice.ObjectPrxI, SessionManagerPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionManagerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionManagerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionManagerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SessionManagerPrx? {
    return try SessionManagerPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionManagerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionManagerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionManagerPrx.Protocol, facet: Swift.String? = nil) -> SessionManagerPrx {
    return SessionManagerPrxI.uncheckedCast(prx: prx, facet: facet) as SessionManagerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SessionManagerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SessionManagerPrx.Protocol) -> Swift.String {
    return SessionManagerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionManagerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionManagerPrx?` - The extracted proxy
    func read(_ type: SessionManagerPrx.Protocol) throws -> SessionManagerPrx? {
        return try read() as SessionManagerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionManagerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionManagerPrx.Protocol) throws -> SessionManagerPrx? {
        return try read(tag: tag) as SessionManagerPrxI?
    }
}

/// The session manager for username/password authenticated users that
/// is responsible for managing Session objects. New session objects
/// are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application,
/// no client-visible sessions are passed to the client.
///
/// SessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public extension SessionManagerPrx {
    /// Create a new session.
    ///
    /// - parameter userId: `Swift.String` The user id for the session.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    func create(userId iceP_userId: Swift.String, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil) throws -> SessionPrx? {
        return try _impl._invoke(operation: "create",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_userId)
                                     ostr.write(iceP_control)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CannotCreateSessionException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Create a new session.
    ///
    /// - parameter userId: `Swift.String` The user id for the session.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createAsync(userId iceP_userId: Swift.String, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SessionPrx?> {
        return _impl._invokeAsync(operation: "create",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_userId)
                                      ostr.write(iceP_control)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CannotCreateSessionException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// The session manager for SSL authenticated users that is
/// responsible for managing Session objects. New session objects are
/// created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the
/// application, no client-visible sessions are passed to the client.
///
/// SSLSessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public protocol SSLSessionManagerPrx: Ice.ObjectPrx {}

private final class SSLSessionManagerPrxI: Ice.ObjectPrxI, SSLSessionManagerPrx {
    public override class func ice_staticId() -> Swift.String {
        return SSLSessionManagerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SSLSessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SSLSessionManagerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SSLSessionManagerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SSLSessionManagerPrx? {
    return try SSLSessionManagerPrxI.checkedCast(prx: prx, facet: facet, context: context) as SSLSessionManagerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SSLSessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SSLSessionManagerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SSLSessionManagerPrx.Protocol, facet: Swift.String? = nil) -> SSLSessionManagerPrx {
    return SSLSessionManagerPrxI.uncheckedCast(prx: prx, facet: facet) as SSLSessionManagerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SSLSessionManagerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SSLSessionManagerPrx.Protocol) -> Swift.String {
    return SSLSessionManagerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SSLSessionManagerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SSLSessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLSessionManagerPrx?` - The extracted proxy
    func read(_ type: SSLSessionManagerPrx.Protocol) throws -> SSLSessionManagerPrx? {
        return try read() as SSLSessionManagerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SSLSessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLSessionManagerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SSLSessionManagerPrx.Protocol) throws -> SSLSessionManagerPrx? {
        return try read(tag: tag) as SSLSessionManagerPrxI?
    }
}

/// The session manager for SSL authenticated users that is
/// responsible for managing Session objects. New session objects are
/// created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the
/// application, no client-visible sessions are passed to the client.
///
/// SSLSessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public extension SSLSessionManagerPrx {
    /// Create a new session.
    ///
    /// - parameter info: `SSLInfo` The SSL info.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    func create(info iceP_info: SSLInfo, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil) throws -> SessionPrx? {
        return try _impl._invoke(operation: "create",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_info)
                                     ostr.write(iceP_control)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CannotCreateSessionException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Create a new session.
    ///
    /// - parameter info: `SSLInfo` The SSL info.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createAsync(info iceP_info: SSLInfo, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SessionPrx?> {
        return _impl._invokeAsync(operation: "create",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_info)
                                      ostr.write(iceP_control)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CannotCreateSessionException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `Session` servants.
public struct SessionDisp: Ice.Disp {
    public let servant: Session
    private static let defaultObject = Ice.ObjectI<SessionTraits>()

    public init(_ servant: Session) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "destroy":
            return try servant._iceD_destroy(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? SessionDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? SessionDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? SessionDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? SessionDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
public protocol Session {
    /// Destroy the session. This is called automatically when the router is destroyed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroy(current: Ice.Current) throws
}


/// Dispatcher for `StringSet` servants.
public struct StringSetDisp: Ice.Disp {
    public let servant: StringSet
    private static let defaultObject = Ice.ObjectI<StringSetTraits>()

    public init(_ servant: StringSet) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "add":
            return try servant._iceD_add(incoming: request, current: current)
        case "get":
            return try servant._iceD_get(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? StringSetDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? StringSetDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? StringSetDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? StringSetDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "remove":
            return try servant._iceD_remove(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// An object for managing the set of identity constraints for specific
/// parts of object identity on a
/// Session.
public protocol StringSet {
    /// Add a sequence of strings to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter additions: `Ice.StringSeq` The sequence of strings to be added.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func add(additions: Ice.StringSeq, current: Ice.Current) throws

    /// Remove a sequence of strings from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter deletions: `Ice.StringSeq` The sequence of strings to be removed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func remove(deletions: Ice.StringSeq, current: Ice.Current) throws

    /// Returns a sequence of strings describing the constraints in this
    /// set.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.StringSeq` - The sequence of strings for this set.
    func `get`(current: Ice.Current) throws -> Ice.StringSeq
}


/// Dispatcher for `IdentitySet` servants.
public struct IdentitySetDisp: Ice.Disp {
    public let servant: IdentitySet
    private static let defaultObject = Ice.ObjectI<IdentitySetTraits>()

    public init(_ servant: IdentitySet) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "add":
            return try servant._iceD_add(incoming: request, current: current)
        case "get":
            return try servant._iceD_get(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? IdentitySetDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? IdentitySetDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? IdentitySetDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? IdentitySetDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "remove":
            return try servant._iceD_remove(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// An object for managing the set of object identity constraints on a
/// Session.
public protocol IdentitySet {
    /// Add a sequence of Ice identities to this set of constraints. Order is
    /// not preserved and duplicates are implicitly removed.
    ///
    /// - parameter additions: `Ice.IdentitySeq` The sequence of Ice identities to be added.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func add(additions: Ice.IdentitySeq, current: Ice.Current) throws

    /// Remove a sequence of identities from this set of constraints. No
    /// errors are returned if an entry is not found.
    ///
    /// - parameter deletions: `Ice.IdentitySeq` The sequence of Ice identities to be removed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func remove(deletions: Ice.IdentitySeq, current: Ice.Current) throws

    /// Returns a sequence of identities describing the constraints in this
    /// set.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.IdentitySeq` - The sequence of Ice identities for this set.
    func `get`(current: Ice.Current) throws -> Ice.IdentitySeq
}


/// Dispatcher for `SessionControl` servants.
public struct SessionControlDisp: Ice.Disp {
    public let servant: SessionControl
    private static let defaultObject = Ice.ObjectI<SessionControlTraits>()

    public init(_ servant: SessionControl) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "adapterIds":
            return try servant._iceD_adapterIds(incoming: request, current: current)
        case "categories":
            return try servant._iceD_categories(incoming: request, current: current)
        case "destroy":
            return try servant._iceD_destroy(incoming: request, current: current)
        case "getSessionTimeout":
            return try servant._iceD_getSessionTimeout(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? SessionControlDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? SessionControlDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? SessionControlDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? SessionControlDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "identities":
            return try servant._iceD_identities(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// An administrative session control object, which is tied to the
/// lifecycle of a Session.
public protocol SessionControl {
    /// Access the object that manages the allowable categories
    /// for object identities for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object.
    func categories(current: Ice.Current) throws -> StringSetPrx?

    /// Access the object that manages the allowable adapter identities
    /// for objects for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object.
    func adapterIds(current: Ice.Current) throws -> StringSetPrx?

    /// Access the object that manages the allowable object identities
    /// for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `IdentitySetPrx?` - An IdentitySet object.
    func identities(current: Ice.Current) throws -> IdentitySetPrx?

    /// Get the session timeout.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32` - The timeout.
    func getSessionTimeout(current: Ice.Current) throws -> Swift.Int32

    /// Destroy the associated session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroy(current: Ice.Current) throws
}


/// Dispatcher for `SessionManager` servants.
public struct SessionManagerDisp: Ice.Disp {
    public let servant: SessionManager
    private static let defaultObject = Ice.ObjectI<SessionManagerTraits>()

    public init(_ servant: SessionManager) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "create":
            return try servant._iceD_create(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? SessionManagerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? SessionManagerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? SessionManagerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? SessionManagerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The session manager for username/password authenticated users that
/// is responsible for managing Session objects. New session objects
/// are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application,
/// no client-visible sessions are passed to the client.
public protocol SessionManager {
    /// Create a new session.
    ///
    /// - parameter userId: `Swift.String` The user id for the session.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    func create(userId: Swift.String, control: SessionControlPrx?, current: Ice.Current) throws -> SessionPrx?
}


/// Dispatcher for `SSLSessionManager` servants.
public struct SSLSessionManagerDisp: Ice.Disp {
    public let servant: SSLSessionManager
    private static let defaultObject = Ice.ObjectI<SSLSessionManagerTraits>()

    public init(_ servant: SSLSessionManager) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "create":
            return try servant._iceD_create(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The session manager for SSL authenticated users that is
/// responsible for managing Session objects. New session objects are
/// created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the
/// application, no client-visible sessions are passed to the client.
public protocol SSLSessionManager {
    /// Create a new session.
    ///
    /// - parameter info: `SSLInfo` The SSL info.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    func create(info: SSLInfo, control: SessionControlPrx?, current: Ice.Current) throws -> SessionPrx?
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// Session Methods:
///
///  - destroy: Destroy the session.
public extension Session {
    func _iceD_destroy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.destroy(current: current)

        return inS.setResult()
    }
}

/// An object for managing the set of identity constraints for specific
/// parts of object identity on a
/// Session.
///
/// StringSet Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
public extension StringSet {
    func _iceD_add(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_additions: Ice.StringSeq = try inS.read { istr in
            let iceP_additions: Ice.StringSeq = try istr.read()
            return iceP_additions
        }

        try self.add(additions: iceP_additions, current: current)

        return inS.setResult()
    }

    func _iceD_remove(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_deletions: Ice.StringSeq = try inS.read { istr in
            let iceP_deletions: Ice.StringSeq = try istr.read()
            return iceP_deletions
        }

        try self.remove(deletions: iceP_deletions, current: current)

        return inS.setResult()
    }

    func _iceD_get(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.`get`(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// An object for managing the set of object identity constraints on a
/// Session.
///
/// IdentitySet Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
public extension IdentitySet {
    func _iceD_add(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_additions: Ice.IdentitySeq = try inS.read { istr in
            let iceP_additions: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
            return iceP_additions
        }

        try self.add(additions: iceP_additions, current: current)

        return inS.setResult()
    }

    func _iceD_remove(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_deletions: Ice.IdentitySeq = try inS.read { istr in
            let iceP_deletions: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
            return iceP_deletions
        }

        try self.remove(deletions: iceP_deletions, current: current)

        return inS.setResult()
    }

    func _iceD_get(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.`get`(current: current)

        return inS.setResult{ ostr in
            Ice.IdentitySeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }
}

/// An administrative session control object, which is tied to the
/// lifecycle of a Session.
///
/// SessionControl Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - destroy: Destroy the associated session.
public extension SessionControl {
    func _iceD_categories(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.categories(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_adapterIds(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.adapterIds(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_identities(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.identities(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_getSessionTimeout(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getSessionTimeout(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_destroy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.destroy(current: current)

        return inS.setResult()
    }
}

/// The session manager for username/password authenticated users that
/// is responsible for managing Session objects. New session objects
/// are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application,
/// no client-visible sessions are passed to the client.
///
/// SessionManager Methods:
///
///  - create: Create a new session.
public extension SessionManager {
    func _iceD_create(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_userId, iceP_control): (Swift.String, SessionControlPrx?) = try inS.read { istr in
            let iceP_userId: Swift.String = try istr.read()
            let iceP_control: SessionControlPrx? = try istr.read(SessionControlPrx.self)
            return (iceP_userId, iceP_control)
        }
        inS.setFormat(.SlicedFormat)

        let iceP_returnValue = try self.create(userId: iceP_userId, control: iceP_control, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// The session manager for SSL authenticated users that is
/// responsible for managing Session objects. New session objects are
/// created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the
/// application, no client-visible sessions are passed to the client.
///
/// SSLSessionManager Methods:
///
///  - create: Create a new session.
public extension SSLSessionManager {
    func _iceD_create(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_info, iceP_control): (SSLInfo, SessionControlPrx?) = try inS.read { istr in
            let iceP_info: SSLInfo = try istr.read()
            let iceP_control: SessionControlPrx? = try istr.read(SessionControlPrx.self)
            return (iceP_info, iceP_control)
        }
        inS.setFormat(.SlicedFormat)

        let iceP_returnValue = try self.create(info: iceP_info, control: iceP_control, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
