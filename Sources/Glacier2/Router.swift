//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// :nodoc:
public class SessionNotExistException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return SessionNotExistException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Glacier2_SessionNotExistException() -> Ice.UserExceptionTypeResolver {
        return SessionNotExistException_TypeResolver()
    }
}

/// This exception is raised if a client tries to destroy a session
/// with a router, but no session exists for the client.
open class SessionNotExistException: Ice.UserException {
    public required init() {}

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Glacier2::SessionNotExistException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: SessionNotExistException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `Router`.
public struct RouterTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::Router", "::Ice::Object", "::Ice::Router"]
    public static let staticId = "::Glacier2::Router"
}

/// The Glacier2 specialization of the Ice::Router interface.
///
/// RouterPrx Methods:
///
///  - getCategoryForClient: This category must be used in the identities of all of the client's callback objects.
///
///  - getCategoryForClientAsync: This category must be used in the identities of all of the client's callback objects.
///
///  - createSession: Create a per-client session with the router.
///
///  - createSessionAsync: Create a per-client session with the router.
///
///  - createSessionFromSecureConnection: Create a per-client session with the router.
///
///  - createSessionFromSecureConnectionAsync: Create a per-client session with the router.
///
///  - refreshSession: Keep the calling client's session with this router alive.
///
///  - refreshSessionAsync: Keep the calling client's session with this router alive.
///
///  - destroySession: Destroy the calling client's session with this router.
///
///  - destroySessionAsync: Destroy the calling client's session with this router.
///
///  - getSessionTimeout: Get the value of the session timeout.
///
///  - getSessionTimeoutAsync: Get the value of the session timeout.
///
///  - getACMTimeout: Get the value of the ACM timeout.
///
///  - getACMTimeoutAsync: Get the value of the ACM timeout.
public protocol RouterPrx: Ice.RouterPrx {}

private final class RouterPrxI: Ice.ObjectPrxI, RouterPrx {
    public override class func ice_staticId() -> Swift.String {
        return RouterTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `RouterPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `RouterPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: RouterPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> RouterPrx? {
    return try RouterPrxI.checkedCast(prx: prx, facet: facet, context: context) as RouterPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `RouterPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `RouterPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: RouterPrx.Protocol, facet: Swift.String? = nil) -> RouterPrx {
    return RouterPrxI.uncheckedCast(prx: prx, facet: facet) as RouterPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `RouterPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: RouterPrx.Protocol) -> Swift.String {
    return RouterTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `RouterPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `RouterPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RouterPrx?` - The extracted proxy
    func read(_ type: RouterPrx.Protocol) throws -> RouterPrx? {
        return try read() as RouterPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `RouterPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RouterPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: RouterPrx.Protocol) throws -> RouterPrx? {
        return try read(tag: tag) as RouterPrxI?
    }
}

/// The Glacier2 specialization of the Ice::Router interface.
///
/// RouterPrx Methods:
///
///  - getCategoryForClient: This category must be used in the identities of all of the client's callback objects.
///
///  - getCategoryForClientAsync: This category must be used in the identities of all of the client's callback objects.
///
///  - createSession: Create a per-client session with the router.
///
///  - createSessionAsync: Create a per-client session with the router.
///
///  - createSessionFromSecureConnection: Create a per-client session with the router.
///
///  - createSessionFromSecureConnectionAsync: Create a per-client session with the router.
///
///  - refreshSession: Keep the calling client's session with this router alive.
///
///  - refreshSessionAsync: Keep the calling client's session with this router alive.
///
///  - destroySession: Destroy the calling client's session with this router.
///
///  - destroySessionAsync: Destroy the calling client's session with this router.
///
///  - getSessionTimeout: Get the value of the session timeout.
///
///  - getSessionTimeoutAsync: Get the value of the session timeout.
///
///  - getACMTimeout: Get the value of the ACM timeout.
///
///  - getACMTimeoutAsync: Get the value of the ACM timeout.
public extension RouterPrx {
    /// This category must be used in the identities of all of the client's
    /// callback objects. This is necessary in order for the router to
    /// forward callback requests to the intended client. If the Glacier2
    /// server endpoints are not set, the returned category is an empty
    /// string.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String` - The category.
    func getCategoryForClient(context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "getCategoryForClient",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// This category must be used in the identities of all of the client's
    /// callback objects. This is necessary in order for the router to
    /// forward callback requests to the intended client. If the Glacier2
    /// server endpoints are not set, the returned category is an empty
    /// string.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func getCategoryForClientAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "getCategoryForClient",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Create a per-client session with the router. If a
    /// SessionManager has been installed, a proxy to a Session
    /// object is returned to the client. Otherwise, null is returned
    /// and only an internal session (i.e., not visible to the client)
    /// is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter userId: `Swift.String` The user id for which to check the password.
    ///
    /// - parameter password: `Swift.String` The password for the given user id.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy for the newly created session, or null if no
    /// SessionManager has been installed.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    ///
    ///   - PermissionDeniedException - Raised if the password for
    ///     the given user id is not correct, or if the user is not allowed
    ///     access.
    func createSession(userId iceP_userId: Swift.String, password iceP_password: Swift.String, context: Ice.Context? = nil) throws -> SessionPrx? {
        return try _impl._invoke(operation: "createSession",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_userId)
                                     ostr.write(iceP_password)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CannotCreateSessionException {
                                         throw error
                                     } catch let error as PermissionDeniedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Create a per-client session with the router. If a
    /// SessionManager has been installed, a proxy to a Session
    /// object is returned to the client. Otherwise, null is returned
    /// and only an internal session (i.e., not visible to the client)
    /// is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter userId: `Swift.String` The user id for which to check the password.
    ///
    /// - parameter password: `Swift.String` The password for the given user id.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createSessionAsync(userId iceP_userId: Swift.String, password iceP_password: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SessionPrx?> {
        return _impl._invokeAsync(operation: "createSession",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_userId)
                                      ostr.write(iceP_password)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CannotCreateSessionException {
                                          throw error
                                      } catch let error as PermissionDeniedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Create a per-client session with the router. The user is
    /// authenticated through the SSL certificates that have been
    /// associated with the connection. If a SessionManager has been
    /// installed, a proxy to a Session object is returned to the
    /// client. Otherwise, null is returned and only an internal
    /// session (i.e., not visible to the client) is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy for the newly created session, or null if no
    /// SessionManager has been installed.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session
    ///     cannot be created.
    ///
    ///   - PermissionDeniedException - Raised if the user cannot be
    ///     authenticated or if the user is not allowed access.
    func createSessionFromSecureConnection(context: Ice.Context? = nil) throws -> SessionPrx? {
        return try _impl._invoke(operation: "createSessionFromSecureConnection",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 read: { istr in
                                     let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CannotCreateSessionException {
                                         throw error
                                     } catch let error as PermissionDeniedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Create a per-client session with the router. The user is
    /// authenticated through the SSL certificates that have been
    /// associated with the connection. If a SessionManager has been
    /// installed, a proxy to a Session object is returned to the
    /// client. Otherwise, null is returned and only an internal
    /// session (i.e., not visible to the client) is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createSessionFromSecureConnectionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SessionPrx?> {
        return _impl._invokeAsync(operation: "createSessionFromSecureConnection",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  read: { istr in
                                      let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CannotCreateSessionException {
                                          throw error
                                      } catch let error as PermissionDeniedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Keep the calling client's session with this router alive.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - throws:
    ///
    ///   - SessionNotExistException - Raised if no session exists
    ///     for the calling client.
    func refreshSession(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "refreshSession",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as SessionNotExistException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    /// Keep the calling client's session with this router alive.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func refreshSessionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "refreshSession",
                                  mode: .Normal,
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as SessionNotExistException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Destroy the calling client's session with this router.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - throws:
    ///
    ///   - SessionNotExistException - Raised if no session exists
    ///     for the calling client.
    func destroySession(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroySession",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as SessionNotExistException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    /// Destroy the calling client's session with this router.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroySessionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroySession",
                                  mode: .Normal,
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as SessionNotExistException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the value of the session timeout. Sessions are destroyed
    /// if they see no activity for this period of time.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int64` - The timeout (in seconds).
    func getSessionTimeout(context: Ice.Context? = nil) throws -> Swift.Int64 {
        return try _impl._invoke(operation: "getSessionTimeout",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int64 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Get the value of the session timeout. Sessions are destroyed
    /// if they see no activity for this period of time.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int64>` - The result of the operation
    func getSessionTimeoutAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int64> {
        return _impl._invokeAsync(operation: "getSessionTimeout",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int64 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the value of the ACM timeout. Clients supporting connection
    /// heartbeats can enable them instead of explicitly sending keep
    /// alives requests.
    ///
    /// NOTE: This method is only available since Ice 3.6.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32` - The timeout (in seconds).
    func getACMTimeout(context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "getACMTimeout",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Get the value of the ACM timeout. Clients supporting connection
    /// heartbeats can enable them instead of explicitly sending keep
    /// alives requests.
    ///
    /// NOTE: This method is only available since Ice 3.6.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func getACMTimeoutAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "getACMTimeout",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `Router` servants.
public struct RouterDisp: Ice.Disp {
    public let servant: Router
    private static let defaultObject = Ice.ObjectI<RouterTraits>()

    public init(_ servant: Router) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "addProxies":
            return try servant._iceD_addProxies(incoming: request, current: current)
        case "createSession":
            return try servant._iceD_createSession(incoming: request, current: current)
        case "createSessionFromSecureConnection":
            return try servant._iceD_createSessionFromSecureConnection(incoming: request, current: current)
        case "destroySession":
            return try servant._iceD_destroySession(incoming: request, current: current)
        case "getACMTimeout":
            return try servant._iceD_getACMTimeout(incoming: request, current: current)
        case "getCategoryForClient":
            return try servant._iceD_getCategoryForClient(incoming: request, current: current)
        case "getClientProxy":
            return try servant._iceD_getClientProxy(incoming: request, current: current)
        case "getServerProxy":
            return try servant._iceD_getServerProxy(incoming: request, current: current)
        case "getSessionTimeout":
            return try servant._iceD_getSessionTimeout(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? RouterDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? RouterDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? RouterDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? RouterDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "refreshSession":
            return try servant._iceD_refreshSession(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The Glacier2 specialization of the Ice::Router interface.
public protocol Router: Ice.Router {
    /// This category must be used in the identities of all of the client's
    /// callback objects. This is necessary in order for the router to
    /// forward callback requests to the intended client. If the Glacier2
    /// server endpoints are not set, the returned category is an empty
    /// string.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String` - The category.
    func getCategoryForClient(current: Ice.Current) throws -> Swift.String

    /// Create a per-client session with the router. If a
    /// SessionManager has been installed, a proxy to a Session
    /// object is returned to the client. Otherwise, null is returned
    /// and only an internal session (i.e., not visible to the client)
    /// is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter userId: `Swift.String` The user id for which to check the password.
    ///
    /// - parameter password: `Swift.String` The password for the given user id.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createSessionAsync(userId: Swift.String, password: Swift.String, current: Ice.Current) -> PromiseKit.Promise<SessionPrx?>

    /// Create a per-client session with the router. The user is
    /// authenticated through the SSL certificates that have been
    /// associated with the connection. If a SessionManager has been
    /// installed, a proxy to a Session object is returned to the
    /// client. Otherwise, null is returned and only an internal
    /// session (i.e., not visible to the client) is created.
    ///
    /// If a session proxy is returned, it must be configured to route
    /// through the router that created it. This will happen automatically
    /// if the router is configured as the client's default router at the
    /// time the session proxy is created in the client process, otherwise
    /// the client must configure the session proxy explicitly.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<SessionPrx?>` - The result of the operation
    func createSessionFromSecureConnectionAsync(current: Ice.Current) -> PromiseKit.Promise<SessionPrx?>

    /// Keep the calling client's session with this router alive.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func refreshSessionAsync(current: Ice.Current) -> PromiseKit.Promise<Swift.Void>

    /// Destroy the calling client's session with this router.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - throws:
    ///
    ///   - SessionNotExistException - Raised if no session exists
    ///     for the calling client.
    func destroySession(current: Ice.Current) throws

    /// Get the value of the session timeout. Sessions are destroyed
    /// if they see no activity for this period of time.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int64` - The timeout (in seconds).
    func getSessionTimeout(current: Ice.Current) throws -> Swift.Int64

    /// Get the value of the ACM timeout. Clients supporting connection
    /// heartbeats can enable them instead of explicitly sending keep
    /// alives requests.
    ///
    /// NOTE: This method is only available since Ice 3.6.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32` - The timeout (in seconds).
    func getACMTimeout(current: Ice.Current) throws -> Swift.Int32
}

/// The Glacier2 specialization of the Ice::Router interface.
///
/// Router Methods:
///
///  - getCategoryForClient: This category must be used in the identities of all of the client's callback objects.
///
///  - createSession: Create a per-client session with the router.
///
///  - createSessionFromSecureConnection: Create a per-client session with the router.
///
///  - refreshSession: Keep the calling client's session with this router alive.
///
///  - destroySession: Destroy the calling client's session with this router.
///
///  - getSessionTimeout: Get the value of the session timeout.
///
///  - getACMTimeout: Get the value of the ACM timeout.
public extension Router {
    func _iceD_getCategoryForClient(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getCategoryForClient(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_createSession(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_userId, iceP_password): (Swift.String, Swift.String) = try inS.read { istr in
            let iceP_userId: Swift.String = try istr.read()
            let iceP_password: Swift.String = try istr.read()
            return (iceP_userId, iceP_password)
        }
        inS.setFormat(.SlicedFormat)

        return inS.setResultPromise(createSessionAsync(userId: iceP_userId, password: iceP_password, current: current)) { (ostr, retVals) in
            let iceP_returnValue = retVals
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_createSessionFromSecureConnection(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()
        inS.setFormat(.SlicedFormat)

        return inS.setResultPromise(createSessionFromSecureConnectionAsync(current: current)) { (ostr, retVals) in
            let iceP_returnValue = retVals
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_refreshSession(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        return inS.setResultPromise(refreshSessionAsync(current: current))
    }

    func _iceD_destroySession(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.destroySession(current: current)

        return inS.setResult()
    }

    func _iceD_getSessionTimeout(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getSessionTimeout(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_getACMTimeout(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getACMTimeout(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
