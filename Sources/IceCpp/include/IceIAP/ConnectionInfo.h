//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `ConnectionInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceIAP_ConnectionInfo_h__
#define __IceIAP_ConnectionInfo_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/OutgoingAsync.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/Connection.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 7
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICEIAP_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEIAP_API /**/
#   elif defined(ICEIAP_API_EXPORTS)
#       define ICEIAP_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEIAP_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceIAP
{

class ConnectionInfo;

}

namespace IceIAP
{

/**
 * Provides access to the connection details of an IAP connection
 * \headerfile IceIAP/IceIAP.h
 */
class ICE_CLASS(ICEIAP_API) ConnectionInfo : public ::Ice::ConnectionInfo
{
public:

    ICE_MEMBER(ICEIAP_API) virtual ~ConnectionInfo();

    ConnectionInfo() = default;

    ConnectionInfo(const ConnectionInfo&) = default;
    ConnectionInfo(ConnectionInfo&&) = default;
    ConnectionInfo& operator=(const ConnectionInfo&) = default;
    ConnectionInfo& operator=(ConnectionInfo&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param underlying The information of the underyling transport or null if there's no underlying transport.
     * @param incoming Whether or not the connection is an incoming or outgoing connection.
     * @param adapterName The name of the adapter associated with the connection.
     * @param connectionId The connection id.
     * @param name The accessory name.
     * @param manufacturer The accessory manufacturer.
     * @param modelNumber The accessory model number.
     * @param firmwareRevision The accessory firmare revision.
     * @param hardwareRevision The accessory hardware revision.
     * @param protocol The protocol used by the accessory.
     */
    ConnectionInfo(const ::std::shared_ptr<::Ice::ConnectionInfo>& underlying, bool incoming, const ::std::string& adapterName, const ::std::string& connectionId, const ::std::string& name, const ::std::string& manufacturer, const ::std::string& modelNumber, const ::std::string& firmwareRevision, const ::std::string& hardwareRevision, const ::std::string& protocol) :
        ::Ice::ConnectionInfo(underlying, incoming, adapterName, connectionId),
        name(name),
        manufacturer(manufacturer),
        modelNumber(modelNumber),
        firmwareRevision(firmwareRevision),
        hardwareRevision(hardwareRevision),
        protocol(protocol)
    {
    }

    /**
     * The accessory name.
     */
    ::std::string name;
    /**
     * The accessory manufacturer.
     */
    ::std::string manufacturer;
    /**
     * The accessory model number.
     */
    ::std::string modelNumber;
    /**
     * The accessory firmare revision.
     */
    ::std::string firmwareRevision;
    /**
     * The accessory hardware revision.
     */
    ::std::string hardwareRevision;
    /**
     * The protocol used by the accessory.
     */
    ::std::string protocol;
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace IceIAP
{

using ConnectionInfoPtr = ::std::shared_ptr<ConnectionInfo>;

}
/// \endcond

#else // C++98 mapping

namespace IceIAP
{

class ConnectionInfo;
/// \cond INTERNAL
ICEIAP_API ::Ice::LocalObject* upCast(ConnectionInfo*);
/// \endcond
typedef ::IceInternal::Handle< ConnectionInfo> ConnectionInfoPtr;

}

namespace IceIAP
{

/**
 * Provides access to the connection details of an IAP connection
 * \headerfile IceIAP/IceIAP.h
 */
class ICEIAP_API ConnectionInfo : public ::Ice::ConnectionInfo
{
public:

    typedef ConnectionInfoPtr PointerType;

    virtual ~ConnectionInfo();

    ConnectionInfo()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     * @param underlying The information of the underyling transport or null if there's no underlying transport.
     * @param incoming Whether or not the connection is an incoming or outgoing connection.
     * @param adapterName The name of the adapter associated with the connection.
     * @param connectionId The connection id.
     * @param name The accessory name.
     * @param manufacturer The accessory manufacturer.
     * @param modelNumber The accessory model number.
     * @param firmwareRevision The accessory firmare revision.
     * @param hardwareRevision The accessory hardware revision.
     * @param protocol The protocol used by the accessory.
     */
    ConnectionInfo(const ::Ice::ConnectionInfoPtr& underlying, bool incoming, const ::std::string& adapterName, const ::std::string& connectionId, const ::std::string& name, const ::std::string& manufacturer, const ::std::string& modelNumber, const ::std::string& firmwareRevision, const ::std::string& hardwareRevision, const ::std::string& protocol) :
        ::Ice::ConnectionInfo(underlying, incoming, adapterName, connectionId),
        name(name),
        manufacturer(manufacturer),
        modelNumber(modelNumber),
        firmwareRevision(firmwareRevision),
        hardwareRevision(hardwareRevision),
        protocol(protocol)
    {
    }

#ifdef ICE_CPP11_COMPILER
    ConnectionInfo(const ConnectionInfo&) = default;
    ConnectionInfo& operator=(const ConnectionInfo&) = default;
#endif

    /**
     * The accessory name.
     */
    ::std::string name;
    /**
     * The accessory manufacturer.
     */
    ::std::string manufacturer;
    /**
     * The accessory model number.
     */
    ::std::string modelNumber;
    /**
     * The accessory firmare revision.
     */
    ::std::string firmwareRevision;
    /**
     * The accessory hardware revision.
     */
    ::std::string hardwareRevision;
    /**
     * The protocol used by the accessory.
     */
    ::std::string protocol;
};

/// \cond INTERNAL
inline bool operator==(const ConnectionInfo& lhs, const ConnectionInfo& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) == static_cast<const ::Ice::LocalObject&>(rhs);
}

inline bool operator<(const ConnectionInfo& lhs, const ConnectionInfo& rhs)
{
    return static_cast<const ::Ice::LocalObject&>(lhs) < static_cast<const ::Ice::LocalObject&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
