//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// :nodoc:
public class ParseException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return ParseException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_ParseException() -> Ice.UserExceptionTypeResolver {
        return ParseException_TypeResolver()
    }
}

/// This exception is raised if an error occurs during parsing.
open class ParseException: Ice.UserException {
    /// The reason for the failure.
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IceGrid::ParseException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ParseException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `FileParser`.
public struct FileParserTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::FileParser"]
    public static let staticId = "::IceGrid::FileParser"
}

/// icegridadmin provides a FileParser
/// object to transform XML files into ApplicationDescriptor
/// objects.
///
/// FileParserPrx Methods:
///
///  - parse: Parse a file.
///
///  - parseAsync: Parse a file.
public protocol FileParserPrx: Ice.ObjectPrx {}

private final class FileParserPrxI: Ice.ObjectPrxI, FileParserPrx {
    public override class func ice_staticId() -> Swift.String {
        return FileParserTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `FileParserPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `FileParserPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: FileParserPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> FileParserPrx? {
    return try FileParserPrxI.checkedCast(prx: prx, facet: facet, context: context) as FileParserPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `FileParserPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `FileParserPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: FileParserPrx.Protocol, facet: Swift.String? = nil) -> FileParserPrx {
    return FileParserPrxI.uncheckedCast(prx: prx, facet: facet) as FileParserPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `FileParserPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: FileParserPrx.Protocol) -> Swift.String {
    return FileParserTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `FileParserPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `FileParserPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileParserPrx?` - The extracted proxy
    func read(_ type: FileParserPrx.Protocol) throws -> FileParserPrx? {
        return try read() as FileParserPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `FileParserPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileParserPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: FileParserPrx.Protocol) throws -> FileParserPrx? {
        return try read(tag: tag) as FileParserPrxI?
    }
}

/// icegridadmin provides a FileParser
/// object to transform XML files into ApplicationDescriptor
/// objects.
///
/// FileParserPrx Methods:
///
///  - parse: Parse a file.
///
///  - parseAsync: Parse a file.
public extension FileParserPrx {
    /// Parse a file.
    ///
    /// - parameter xmlFile: `Swift.String` Full pathname to the file.
    ///
    /// - parameter adminProxy: `AdminPrx?` An Admin proxy, used only to retrieve default
    /// templates when needed. May be null.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `ApplicationDescriptor` - The application descriptor.
    ///
    /// - throws:
    ///
    ///   - ParseException - Raised if an error occurred during parsing.
    func parse(xmlFile iceP_xmlFile: Swift.String, adminProxy iceP_adminProxy: AdminPrx?, context: Ice.Context? = nil) throws -> ApplicationDescriptor {
        return try _impl._invoke(operation: "parse",
                                 mode: .Idempotent,
                                 write: { ostr in
                                     ostr.write(iceP_xmlFile)
                                     ostr.write(iceP_adminProxy)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ApplicationDescriptor = try istr.read()
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as ParseException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Parse a file.
    ///
    /// - parameter xmlFile: `Swift.String` Full pathname to the file.
    ///
    /// - parameter adminProxy: `AdminPrx?` An Admin proxy, used only to retrieve default
    /// templates when needed. May be null.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<ApplicationDescriptor>` - The result of the operation
    func parseAsync(xmlFile iceP_xmlFile: Swift.String, adminProxy iceP_adminProxy: AdminPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<ApplicationDescriptor> {
        return _impl._invokeAsync(operation: "parse",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      ostr.write(iceP_xmlFile)
                                      ostr.write(iceP_adminProxy)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ApplicationDescriptor = try istr.read()
                                      try istr.readPendingValues()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as ParseException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `FileParser` servants.
public struct FileParserDisp: Ice.Disp {
    public let servant: FileParser
    private static let defaultObject = Ice.ObjectI<FileParserTraits>()

    public init(_ servant: FileParser) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? FileParserDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? FileParserDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? FileParserDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? FileParserDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "parse":
            return try servant._iceD_parse(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// icegridadmin provides a FileParser
/// object to transform XML files into ApplicationDescriptor
/// objects.
public protocol FileParser {
    /// Parse a file.
    ///
    /// - parameter xmlFile: `Swift.String` Full pathname to the file.
    ///
    /// - parameter adminProxy: `AdminPrx?` An Admin proxy, used only to retrieve default
    /// templates when needed. May be null.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `ApplicationDescriptor` - The application descriptor.
    ///
    /// - throws:
    ///
    ///   - ParseException - Raised if an error occurred during parsing.
    func parse(xmlFile: Swift.String, adminProxy: AdminPrx?, current: Ice.Current) throws -> ApplicationDescriptor
}

/// icegridadmin provides a FileParser
/// object to transform XML files into ApplicationDescriptor
/// objects.
///
/// FileParser Methods:
///
///  - parse: Parse a file.
public extension FileParser {
    func _iceD_parse(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_xmlFile, iceP_adminProxy): (Swift.String, AdminPrx?) = try inS.read { istr in
            let iceP_xmlFile: Swift.String = try istr.read()
            let iceP_adminProxy: AdminPrx? = try istr.read(AdminPrx.self)
            return (iceP_xmlFile, iceP_adminProxy)
        }

        let iceP_returnValue = try self.parse(xmlFile: iceP_xmlFile, adminProxy: iceP_adminProxy, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }
}
