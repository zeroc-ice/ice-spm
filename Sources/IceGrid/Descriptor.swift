//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// A mapping of string to string.
public typealias StringStringDict = [Swift.String: Swift.String]

/// Helper class to read and write `StringStringDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct StringStringDictHelper {
    /// Read a `StringStringDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `StringStringDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> StringStringDict {
        let sz = try Swift.Int(istr.readSize())
        var v = StringStringDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `StringStringDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `StringStringDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> StringStringDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `StringStringDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `StringStringDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: StringStringDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `StringStringDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `StringStringDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: StringStringDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Property descriptor.
public struct PropertyDescriptor: Swift.Hashable {
    /// The name of the property.
    public var name: Swift.String = ""
    /// The value of the property.
    public var value: Swift.String = ""

    public init() {}

    public init(name: Swift.String, value: Swift.String) {
        self.name = name
        self.value = value
    }
}

/// An `Ice.InputStream` extension to read `PropertyDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `PropertyDescriptor` structured value from the stream.
    ///
    /// - returns: `PropertyDescriptor` - The structured value read from the stream.
    func read() throws -> PropertyDescriptor {
        var v = PropertyDescriptor()
        v.name = try self.read()
        v.value = try self.read()
        return v
    }

    /// Read an optional `PropertyDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `PropertyDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> PropertyDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as PropertyDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `PropertyDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `PropertyDescriptor` structured value to the stream.
    ///
    /// - parameter _: `PropertyDescriptor` - The value to write to the stream.
    func write(_ v: PropertyDescriptor) {
        self.write(v.name)
        self.write(v.value)
    }

    /// Write an optional `PropertyDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `PropertyDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: PropertyDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of property descriptors.
public typealias PropertyDescriptorSeq = [PropertyDescriptor]

/// Helper class to read and write `PropertyDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct PropertyDescriptorSeqHelper {
    /// Read a `PropertyDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `PropertyDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> PropertyDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = PropertyDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: PropertyDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `PropertyDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `PropertyDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> PropertyDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `PropertyDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `PropertyDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: PropertyDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `PropertyDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `PropertyDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: PropertyDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A property set descriptor.
public struct PropertySetDescriptor: Swift.Hashable {
    /// References to named property sets.
    public var references: Ice.StringSeq = Ice.StringSeq()
    /// The property set properties.
    public var properties: PropertyDescriptorSeq = PropertyDescriptorSeq()

    public init() {}

    public init(references: Ice.StringSeq, properties: PropertyDescriptorSeq) {
        self.references = references
        self.properties = properties
    }
}

/// An `Ice.InputStream` extension to read `PropertySetDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `PropertySetDescriptor` structured value from the stream.
    ///
    /// - returns: `PropertySetDescriptor` - The structured value read from the stream.
    func read() throws -> PropertySetDescriptor {
        var v = PropertySetDescriptor()
        v.references = try self.read()
        v.properties = try PropertyDescriptorSeqHelper.read(from: self)
        return v
    }

    /// Read an optional `PropertySetDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `PropertySetDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> PropertySetDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as PropertySetDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `PropertySetDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `PropertySetDescriptor` structured value to the stream.
    ///
    /// - parameter _: `PropertySetDescriptor` - The value to write to the stream.
    func write(_ v: PropertySetDescriptor) {
        self.write(v.references)
        PropertyDescriptorSeqHelper.write(to: self, value: v.properties)
    }

    /// Write an optional `PropertySetDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `PropertySetDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: PropertySetDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A mapping of property set name to property set descriptor.
public typealias PropertySetDescriptorDict = [Swift.String: PropertySetDescriptor]

/// Helper class to read and write `PropertySetDescriptorDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct PropertySetDescriptorDictHelper {
    /// Read a `PropertySetDescriptorDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `PropertySetDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> PropertySetDescriptorDict {
        let sz = try Swift.Int(istr.readSize())
        var v = PropertySetDescriptorDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: PropertySetDescriptor = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `PropertySetDescriptorDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `PropertySetDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> PropertySetDescriptorDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `PropertySetDescriptorDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `PropertySetDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: PropertySetDescriptorDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `PropertySetDescriptorDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `PropertySetDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: PropertySetDescriptorDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// An Ice object descriptor.
public struct ObjectDescriptor: Swift.Hashable {
    /// The identity of the object.
    public var id: Ice.Identity = Ice.Identity()
    /// The object type.
    public var `type`: Swift.String = ""
    /// Proxy options to use with the proxy created for this Ice object. If empty,
    /// the proxy will be created with the proxy options specified on the object
    /// adapter or replica group.
    public var proxyOptions: Swift.String = ""

    public init() {}

    public init(id: Ice.Identity, `type`: Swift.String, proxyOptions: Swift.String) {
        self.id = id
        self.`type` = `type`
        self.proxyOptions = proxyOptions
    }
}

/// An `Ice.InputStream` extension to read `ObjectDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ObjectDescriptor` structured value from the stream.
    ///
    /// - returns: `ObjectDescriptor` - The structured value read from the stream.
    func read() throws -> ObjectDescriptor {
        var v = ObjectDescriptor()
        v.id = try self.read()
        v.`type` = try self.read()
        v.proxyOptions = try self.read()
        return v
    }

    /// Read an optional `ObjectDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ObjectDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ObjectDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ObjectDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ObjectDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ObjectDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ObjectDescriptor` - The value to write to the stream.
    func write(_ v: ObjectDescriptor) {
        self.write(v.id)
        self.write(v.`type`)
        self.write(v.proxyOptions)
    }

    /// Write an optional `ObjectDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ObjectDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ObjectDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of object descriptors.
public typealias ObjectDescriptorSeq = [ObjectDescriptor]

/// Helper class to read and write `ObjectDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ObjectDescriptorSeqHelper {
    /// Read a `ObjectDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ObjectDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ObjectDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = ObjectDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ObjectDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ObjectDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ObjectDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ObjectDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ObjectDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ObjectDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ObjectDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ObjectDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ObjectDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ObjectDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// An Ice object adapter descriptor.
public struct AdapterDescriptor: Swift.Hashable {
    /// The object adapter name.
    public var name: Swift.String = ""
    /// The description of this object adapter.
    public var description: Swift.String = ""
    /// The object adapter id.
    public var id: Swift.String = ""
    /// The replica id of this adapter.
    public var replicaGroupId: Swift.String = ""
    /// The adapter priority. This is eventually used when the adapter
    /// is member of a replica group to sort the adapter endpoints by
    /// priority.
    public var priority: Swift.String = ""
    /// Flag to specify if the object adapter will register a process object.
    public var registerProcess: Swift.Bool = false
    /// If true the lifetime of this object adapter is the same of the
    /// server lifetime. This information is used by the IceGrid node
    /// to figure out the server state: the server is active only if
    /// all its "server lifetime" adapters are active.
    public var serverLifetime: Swift.Bool = false
    /// The well-known object descriptors associated with this object adapter.
    public var objects: ObjectDescriptorSeq = ObjectDescriptorSeq()
    /// The allocatable object descriptors associated with this object adapter.
    public var allocatables: ObjectDescriptorSeq = ObjectDescriptorSeq()

    public init() {}

    public init(name: Swift.String, description: Swift.String, id: Swift.String, replicaGroupId: Swift.String, priority: Swift.String, registerProcess: Swift.Bool, serverLifetime: Swift.Bool, objects: ObjectDescriptorSeq, allocatables: ObjectDescriptorSeq) {
        self.name = name
        self.description = description
        self.id = id
        self.replicaGroupId = replicaGroupId
        self.priority = priority
        self.registerProcess = registerProcess
        self.serverLifetime = serverLifetime
        self.objects = objects
        self.allocatables = allocatables
    }
}

/// An `Ice.InputStream` extension to read `AdapterDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `AdapterDescriptor` structured value from the stream.
    ///
    /// - returns: `AdapterDescriptor` - The structured value read from the stream.
    func read() throws -> AdapterDescriptor {
        var v = AdapterDescriptor()
        v.name = try self.read()
        v.description = try self.read()
        v.id = try self.read()
        v.replicaGroupId = try self.read()
        v.priority = try self.read()
        v.registerProcess = try self.read()
        v.serverLifetime = try self.read()
        v.objects = try ObjectDescriptorSeqHelper.read(from: self)
        v.allocatables = try ObjectDescriptorSeqHelper.read(from: self)
        return v
    }

    /// Read an optional `AdapterDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AdapterDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> AdapterDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as AdapterDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `AdapterDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `AdapterDescriptor` structured value to the stream.
    ///
    /// - parameter _: `AdapterDescriptor` - The value to write to the stream.
    func write(_ v: AdapterDescriptor) {
        self.write(v.name)
        self.write(v.description)
        self.write(v.id)
        self.write(v.replicaGroupId)
        self.write(v.priority)
        self.write(v.registerProcess)
        self.write(v.serverLifetime)
        ObjectDescriptorSeqHelper.write(to: self, value: v.objects)
        ObjectDescriptorSeqHelper.write(to: self, value: v.allocatables)
    }

    /// Write an optional `AdapterDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AdapterDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: AdapterDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of adapter descriptors.
public typealias AdapterDescriptorSeq = [AdapterDescriptor]

/// Helper class to read and write `AdapterDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AdapterDescriptorSeqHelper {
    /// Read a `AdapterDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AdapterDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AdapterDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 9)
        var v = AdapterDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: AdapterDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AdapterDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AdapterDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AdapterDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `AdapterDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AdapterDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AdapterDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AdapterDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AdapterDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AdapterDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A Freeze database environment descriptor.
public struct DbEnvDescriptor: Swift.Hashable {
    /// The name of the database environment.
    public var name: Swift.String = ""
    /// The description of this database environment.
    public var description: Swift.String = ""
    /// The home of the database environment (i.e., the directory where
    /// the database files will be stored). If empty, the node will
    /// provide a default database directory, otherwise the directory
    /// must exist.
    public var dbHome: Swift.String = ""
    /// The configuration properties of the database environment.
    public var properties: PropertyDescriptorSeq = PropertyDescriptorSeq()

    public init() {}

    public init(name: Swift.String, description: Swift.String, dbHome: Swift.String, properties: PropertyDescriptorSeq) {
        self.name = name
        self.description = description
        self.dbHome = dbHome
        self.properties = properties
    }
}

/// An `Ice.InputStream` extension to read `DbEnvDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `DbEnvDescriptor` structured value from the stream.
    ///
    /// - returns: `DbEnvDescriptor` - The structured value read from the stream.
    func read() throws -> DbEnvDescriptor {
        var v = DbEnvDescriptor()
        v.name = try self.read()
        v.description = try self.read()
        v.dbHome = try self.read()
        v.properties = try PropertyDescriptorSeqHelper.read(from: self)
        return v
    }

    /// Read an optional `DbEnvDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `DbEnvDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> DbEnvDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as DbEnvDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `DbEnvDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `DbEnvDescriptor` structured value to the stream.
    ///
    /// - parameter _: `DbEnvDescriptor` - The value to write to the stream.
    func write(_ v: DbEnvDescriptor) {
        self.write(v.name)
        self.write(v.description)
        self.write(v.dbHome)
        PropertyDescriptorSeqHelper.write(to: self, value: v.properties)
    }

    /// Write an optional `DbEnvDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `DbEnvDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: DbEnvDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of database environment descriptors.
public typealias DbEnvDescriptorSeq = [DbEnvDescriptor]

/// Helper class to read and write `DbEnvDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DbEnvDescriptorSeqHelper {
    /// Read a `DbEnvDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `DbEnvDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> DbEnvDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = DbEnvDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: DbEnvDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `DbEnvDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `DbEnvDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> DbEnvDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `DbEnvDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `DbEnvDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: DbEnvDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `DbEnvDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `DbEnvDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: DbEnvDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `CommunicatorDescriptor`.
public struct CommunicatorDescriptorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor"]
    public static let staticId = "::IceGrid::CommunicatorDescriptor"
}

/// A distribution descriptor defines an IcePatch2 server and the
/// directories to retrieve from the patch server.
public struct DistributionDescriptor: Swift.Hashable {
    /// The proxy of the IcePatch2 server.
    public var icepatch: Swift.String = ""
    /// The source directories.
    public var directories: Ice.StringSeq = Ice.StringSeq()

    public init() {}

    public init(icepatch: Swift.String, directories: Ice.StringSeq) {
        self.icepatch = icepatch
        self.directories = directories
    }
}

/// An `Ice.InputStream` extension to read `DistributionDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `DistributionDescriptor` structured value from the stream.
    ///
    /// - returns: `DistributionDescriptor` - The structured value read from the stream.
    func read() throws -> DistributionDescriptor {
        var v = DistributionDescriptor()
        v.icepatch = try self.read()
        v.directories = try self.read()
        return v
    }

    /// Read an optional `DistributionDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `DistributionDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> DistributionDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as DistributionDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `DistributionDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `DistributionDescriptor` structured value to the stream.
    ///
    /// - parameter _: `DistributionDescriptor` - The value to write to the stream.
    func write(_ v: DistributionDescriptor) {
        self.write(v.icepatch)
        self.write(v.directories)
    }

    /// Write an optional `DistributionDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `DistributionDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: DistributionDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// Traits for Slice class `ServerDescriptor`.
public struct ServerDescriptorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServerDescriptor"]
    public static let staticId = "::IceGrid::ServerDescriptor"
}

/// A sequence of server descriptors.
public typealias ServerDescriptorSeq = [ServerDescriptor?]

/// Helper class to read and write `ServerDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ServerDescriptorSeqHelper {
    /// Read a `ServerDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ServerDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ServerDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ServerDescriptorSeq(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(ServerDescriptor.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `ServerDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServerDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ServerDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ServerDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ServerDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ServerDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ServerDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServerDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ServerDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `ServiceDescriptor`.
public struct ServiceDescriptorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServiceDescriptor"]
    public static let staticId = "::IceGrid::ServiceDescriptor"
}

/// A sequence of service descriptors.
public typealias ServiceDescriptorSeq = [ServiceDescriptor?]

/// Helper class to read and write `ServiceDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ServiceDescriptorSeqHelper {
    /// Read a `ServiceDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ServiceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ServiceDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ServiceDescriptorSeq(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(ServiceDescriptor.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `ServiceDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServiceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ServiceDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ServiceDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ServiceDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ServiceDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ServiceDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServiceDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ServiceDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A server template instance descriptor.
public struct ServerInstanceDescriptor {
    /// The template used by this instance.
    public var template: Swift.String = ""
    /// The template parameter values.
    public var parameterValues: StringStringDict = StringStringDict()
    /// The property set.
    public var propertySet: PropertySetDescriptor = PropertySetDescriptor()
    /// The services property sets. It's only valid to set these
    /// property sets if the template is an IceBox server template.
    public var servicePropertySets: PropertySetDescriptorDict = PropertySetDescriptorDict()

    public init() {}

    public init(template: Swift.String, parameterValues: StringStringDict, propertySet: PropertySetDescriptor, servicePropertySets: PropertySetDescriptorDict) {
        self.template = template
        self.parameterValues = parameterValues
        self.propertySet = propertySet
        self.servicePropertySets = servicePropertySets
    }
}

/// An `Ice.InputStream` extension to read `ServerInstanceDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ServerInstanceDescriptor` structured value from the stream.
    ///
    /// - returns: `ServerInstanceDescriptor` - The structured value read from the stream.
    func read() throws -> ServerInstanceDescriptor {
        var v = ServerInstanceDescriptor()
        v.template = try self.read()
        v.parameterValues = try StringStringDictHelper.read(from: self)
        v.propertySet = try self.read()
        v.servicePropertySets = try PropertySetDescriptorDictHelper.read(from: self)
        return v
    }

    /// Read an optional `ServerInstanceDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServerInstanceDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ServerInstanceDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ServerInstanceDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ServerInstanceDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ServerInstanceDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ServerInstanceDescriptor` - The value to write to the stream.
    func write(_ v: ServerInstanceDescriptor) {
        self.write(v.template)
        StringStringDictHelper.write(to: self, value: v.parameterValues)
        self.write(v.propertySet)
        PropertySetDescriptorDictHelper.write(to: self, value: v.servicePropertySets)
    }

    /// Write an optional `ServerInstanceDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServerInstanceDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ServerInstanceDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of server instance descriptors.
public typealias ServerInstanceDescriptorSeq = [ServerInstanceDescriptor]

/// Helper class to read and write `ServerInstanceDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ServerInstanceDescriptorSeqHelper {
    /// Read a `ServerInstanceDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ServerInstanceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ServerInstanceDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 5)
        var v = ServerInstanceDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ServerInstanceDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ServerInstanceDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServerInstanceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ServerInstanceDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ServerInstanceDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ServerInstanceDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ServerInstanceDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ServerInstanceDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServerInstanceDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ServerInstanceDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A template descriptor for server or service templates.
public class TemplateDescriptor {
    /// The template.
    public var descriptor: CommunicatorDescriptor? = nil
    /// The parameters required to instantiate the template.
    public var parameters: Ice.StringSeq = Ice.StringSeq()
    /// The parameters default values.
    public var parameterDefaults: StringStringDict = StringStringDict()

    public init() {}

    public init(descriptor: CommunicatorDescriptor?, parameters: Ice.StringSeq, parameterDefaults: StringStringDict) {
        self.descriptor = descriptor
        self.parameters = parameters
        self.parameterDefaults = parameterDefaults
    }
}

/// An `Ice.InputStream` extension to read `TemplateDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `TemplateDescriptor` structured value from the stream.
    ///
    /// - returns: `TemplateDescriptor` - The structured value read from the stream.
    func read() throws -> TemplateDescriptor {
        let v = TemplateDescriptor()
        try self.read(CommunicatorDescriptor.self) { v.descriptor = $0 }
        v.parameters = try self.read()
        v.parameterDefaults = try StringStringDictHelper.read(from: self)
        return v
    }

    /// Read an optional `TemplateDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `TemplateDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> TemplateDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as TemplateDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `TemplateDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `TemplateDescriptor` structured value to the stream.
    ///
    /// - parameter _: `TemplateDescriptor` - The value to write to the stream.
    func write(_ v: TemplateDescriptor) {
        self.write(v.descriptor)
        self.write(v.parameters)
        StringStringDictHelper.write(to: self, value: v.parameterDefaults)
    }

    /// Write an optional `TemplateDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `TemplateDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: TemplateDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A mapping of template identifier to template descriptor.
public typealias TemplateDescriptorDict = [Swift.String: TemplateDescriptor]

/// Helper class to read and write `TemplateDescriptorDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct TemplateDescriptorDictHelper {
    /// Read a `TemplateDescriptorDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `TemplateDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> TemplateDescriptorDict {
        let sz = try Swift.Int(istr.readSize())
        var v = TemplateDescriptorDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: TemplateDescriptor = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `TemplateDescriptorDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `TemplateDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> TemplateDescriptorDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `TemplateDescriptorDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `TemplateDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: TemplateDescriptorDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `TemplateDescriptorDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `TemplateDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: TemplateDescriptorDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A service template instance descriptor.
public class ServiceInstanceDescriptor {
    /// The template used by this instance.
    public var template: Swift.String = ""
    /// The template parameter values.
    public var parameterValues: StringStringDict = StringStringDict()
    /// The service definition if the instance isn't a template
    /// instance (i.e.: if the template attribute is empty).
    public var descriptor: ServiceDescriptor? = nil
    /// The property set.
    public var propertySet: PropertySetDescriptor = PropertySetDescriptor()

    public init() {}

    public init(template: Swift.String, parameterValues: StringStringDict, descriptor: ServiceDescriptor?, propertySet: PropertySetDescriptor) {
        self.template = template
        self.parameterValues = parameterValues
        self.descriptor = descriptor
        self.propertySet = propertySet
    }
}

/// An `Ice.InputStream` extension to read `ServiceInstanceDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ServiceInstanceDescriptor` structured value from the stream.
    ///
    /// - returns: `ServiceInstanceDescriptor` - The structured value read from the stream.
    func read() throws -> ServiceInstanceDescriptor {
        let v = ServiceInstanceDescriptor()
        v.template = try self.read()
        v.parameterValues = try StringStringDictHelper.read(from: self)
        try self.read(ServiceDescriptor.self) { v.descriptor = $0 }
        v.propertySet = try self.read()
        return v
    }

    /// Read an optional `ServiceInstanceDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServiceInstanceDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ServiceInstanceDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ServiceInstanceDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ServiceInstanceDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ServiceInstanceDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ServiceInstanceDescriptor` - The value to write to the stream.
    func write(_ v: ServiceInstanceDescriptor) {
        self.write(v.template)
        StringStringDictHelper.write(to: self, value: v.parameterValues)
        self.write(v.descriptor)
        self.write(v.propertySet)
    }

    /// Write an optional `ServiceInstanceDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServiceInstanceDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ServiceInstanceDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of service instance descriptors.
public typealias ServiceInstanceDescriptorSeq = [ServiceInstanceDescriptor]

/// Helper class to read and write `ServiceInstanceDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ServiceInstanceDescriptorSeqHelper {
    /// Read a `ServiceInstanceDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ServiceInstanceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ServiceInstanceDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 5)
        var v = ServiceInstanceDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ServiceInstanceDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ServiceInstanceDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ServiceInstanceDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ServiceInstanceDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ServiceInstanceDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ServiceInstanceDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ServiceInstanceDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ServiceInstanceDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ServiceInstanceDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ServiceInstanceDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `IceBoxDescriptor`.
public struct IceBoxDescriptorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::IceBoxDescriptor", "::IceGrid::ServerDescriptor"]
    public static let staticId = "::IceGrid::IceBoxDescriptor"
}

/// A node descriptor.
public class NodeDescriptor {
    /// The variables defined for the node.
    public var variables: StringStringDict = StringStringDict()
    /// The server instances.
    public var serverInstances: ServerInstanceDescriptorSeq = ServerInstanceDescriptorSeq()
    /// Servers (which are not template instances).
    public var servers: ServerDescriptorSeq = ServerDescriptorSeq()
    /// Load factor of the node.
    public var loadFactor: Swift.String = ""
    /// The description of this node.
    public var description: Swift.String = ""
    /// Property set descriptors.
    public var propertySets: PropertySetDescriptorDict = PropertySetDescriptorDict()

    public init() {}

    public init(variables: StringStringDict, serverInstances: ServerInstanceDescriptorSeq, servers: ServerDescriptorSeq, loadFactor: Swift.String, description: Swift.String, propertySets: PropertySetDescriptorDict) {
        self.variables = variables
        self.serverInstances = serverInstances
        self.servers = servers
        self.loadFactor = loadFactor
        self.description = description
        self.propertySets = propertySets
    }
}

/// An `Ice.InputStream` extension to read `NodeDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `NodeDescriptor` structured value from the stream.
    ///
    /// - returns: `NodeDescriptor` - The structured value read from the stream.
    func read() throws -> NodeDescriptor {
        let v = NodeDescriptor()
        v.variables = try StringStringDictHelper.read(from: self)
        v.serverInstances = try ServerInstanceDescriptorSeqHelper.read(from: self)
        v.servers = try ServerDescriptorSeqHelper.read(from: self)
        v.loadFactor = try self.read()
        v.description = try self.read()
        v.propertySets = try PropertySetDescriptorDictHelper.read(from: self)
        return v
    }

    /// Read an optional `NodeDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NodeDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> NodeDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as NodeDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `NodeDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `NodeDescriptor` structured value to the stream.
    ///
    /// - parameter _: `NodeDescriptor` - The value to write to the stream.
    func write(_ v: NodeDescriptor) {
        StringStringDictHelper.write(to: self, value: v.variables)
        ServerInstanceDescriptorSeqHelper.write(to: self, value: v.serverInstances)
        ServerDescriptorSeqHelper.write(to: self, value: v.servers)
        self.write(v.loadFactor)
        self.write(v.description)
        PropertySetDescriptorDictHelper.write(to: self, value: v.propertySets)
    }

    /// Write an optional `NodeDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NodeDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: NodeDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// Mapping of node name to node descriptor.
public typealias NodeDescriptorDict = [Swift.String: NodeDescriptor]

/// Helper class to read and write `NodeDescriptorDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NodeDescriptorDictHelper {
    /// Read a `NodeDescriptorDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NodeDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NodeDescriptorDict {
        let sz = try Swift.Int(istr.readSize())
        var v = NodeDescriptorDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: NodeDescriptor = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NodeDescriptorDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NodeDescriptorDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NodeDescriptorDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NodeDescriptorDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NodeDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NodeDescriptorDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NodeDescriptorDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NodeDescriptorDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NodeDescriptorDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `LoadBalancingPolicy`.
public struct LoadBalancingPolicyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy"]
    public static let staticId = "::IceGrid::LoadBalancingPolicy"
}

/// Traits for Slice class `RandomLoadBalancingPolicy`.
public struct RandomLoadBalancingPolicyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RandomLoadBalancingPolicy"]
    public static let staticId = "::IceGrid::RandomLoadBalancingPolicy"
}

/// Traits for Slice class `OrderedLoadBalancingPolicy`.
public struct OrderedLoadBalancingPolicyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::OrderedLoadBalancingPolicy"]
    public static let staticId = "::IceGrid::OrderedLoadBalancingPolicy"
}

/// Traits for Slice class `RoundRobinLoadBalancingPolicy`.
public struct RoundRobinLoadBalancingPolicyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RoundRobinLoadBalancingPolicy"]
    public static let staticId = "::IceGrid::RoundRobinLoadBalancingPolicy"
}

/// Traits for Slice class `AdaptiveLoadBalancingPolicy`.
public struct AdaptiveLoadBalancingPolicyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::AdaptiveLoadBalancingPolicy", "::IceGrid::LoadBalancingPolicy"]
    public static let staticId = "::IceGrid::AdaptiveLoadBalancingPolicy"
}

/// A replica group descriptor.
public class ReplicaGroupDescriptor {
    /// The id of the replica group.
    public var id: Swift.String = ""
    /// The load balancing policy.
    public var loadBalancing: LoadBalancingPolicy? = nil
    /// Default options for proxies created for the replica group.
    public var proxyOptions: Swift.String = ""
    /// The object descriptors associated with this object adapter.
    public var objects: ObjectDescriptorSeq = ObjectDescriptorSeq()
    /// The description of this replica group.
    public var description: Swift.String = ""
    /// The filter to use for this replica group.
    public var filter: Swift.String = ""

    public init() {}

    public init(id: Swift.String, loadBalancing: LoadBalancingPolicy?, proxyOptions: Swift.String, objects: ObjectDescriptorSeq, description: Swift.String, filter: Swift.String) {
        self.id = id
        self.loadBalancing = loadBalancing
        self.proxyOptions = proxyOptions
        self.objects = objects
        self.description = description
        self.filter = filter
    }
}

/// An `Ice.InputStream` extension to read `ReplicaGroupDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ReplicaGroupDescriptor` structured value from the stream.
    ///
    /// - returns: `ReplicaGroupDescriptor` - The structured value read from the stream.
    func read() throws -> ReplicaGroupDescriptor {
        let v = ReplicaGroupDescriptor()
        v.id = try self.read()
        try self.read(LoadBalancingPolicy.self) { v.loadBalancing = $0 }
        v.proxyOptions = try self.read()
        v.objects = try ObjectDescriptorSeqHelper.read(from: self)
        v.description = try self.read()
        v.filter = try self.read()
        return v
    }

    /// Read an optional `ReplicaGroupDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ReplicaGroupDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ReplicaGroupDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ReplicaGroupDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ReplicaGroupDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ReplicaGroupDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ReplicaGroupDescriptor` - The value to write to the stream.
    func write(_ v: ReplicaGroupDescriptor) {
        self.write(v.id)
        self.write(v.loadBalancing)
        self.write(v.proxyOptions)
        ObjectDescriptorSeqHelper.write(to: self, value: v.objects)
        self.write(v.description)
        self.write(v.filter)
    }

    /// Write an optional `ReplicaGroupDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ReplicaGroupDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ReplicaGroupDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of replica groups.
public typealias ReplicaGroupDescriptorSeq = [ReplicaGroupDescriptor]

/// Helper class to read and write `ReplicaGroupDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ReplicaGroupDescriptorSeqHelper {
    /// Read a `ReplicaGroupDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ReplicaGroupDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ReplicaGroupDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 6)
        var v = ReplicaGroupDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ReplicaGroupDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ReplicaGroupDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ReplicaGroupDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ReplicaGroupDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ReplicaGroupDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ReplicaGroupDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ReplicaGroupDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ReplicaGroupDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ReplicaGroupDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ReplicaGroupDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// An application descriptor.
public class ApplicationDescriptor {
    /// The application name.
    public var name: Swift.String = ""
    /// The variables defined in the application descriptor.
    public var variables: StringStringDict = StringStringDict()
    /// The replica groups.
    public var replicaGroups: ReplicaGroupDescriptorSeq = ReplicaGroupDescriptorSeq()
    /// The server templates.
    public var serverTemplates: TemplateDescriptorDict = TemplateDescriptorDict()
    /// The service templates.
    public var serviceTemplates: TemplateDescriptorDict = TemplateDescriptorDict()
    /// The application nodes.
    public var nodes: NodeDescriptorDict = NodeDescriptorDict()
    /// The application distribution.
    public var distrib: DistributionDescriptor = DistributionDescriptor()
    /// The description of this application.
    public var description: Swift.String = ""
    /// Property set descriptors.
    public var propertySets: PropertySetDescriptorDict = PropertySetDescriptorDict()

    public init() {}

    public init(name: Swift.String, variables: StringStringDict, replicaGroups: ReplicaGroupDescriptorSeq, serverTemplates: TemplateDescriptorDict, serviceTemplates: TemplateDescriptorDict, nodes: NodeDescriptorDict, distrib: DistributionDescriptor, description: Swift.String, propertySets: PropertySetDescriptorDict) {
        self.name = name
        self.variables = variables
        self.replicaGroups = replicaGroups
        self.serverTemplates = serverTemplates
        self.serviceTemplates = serviceTemplates
        self.nodes = nodes
        self.distrib = distrib
        self.description = description
        self.propertySets = propertySets
    }
}

/// An `Ice.InputStream` extension to read `ApplicationDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ApplicationDescriptor` structured value from the stream.
    ///
    /// - returns: `ApplicationDescriptor` - The structured value read from the stream.
    func read() throws -> ApplicationDescriptor {
        let v = ApplicationDescriptor()
        v.name = try self.read()
        v.variables = try StringStringDictHelper.read(from: self)
        v.replicaGroups = try ReplicaGroupDescriptorSeqHelper.read(from: self)
        v.serverTemplates = try TemplateDescriptorDictHelper.read(from: self)
        v.serviceTemplates = try TemplateDescriptorDictHelper.read(from: self)
        v.nodes = try NodeDescriptorDictHelper.read(from: self)
        v.distrib = try self.read()
        v.description = try self.read()
        v.propertySets = try PropertySetDescriptorDictHelper.read(from: self)
        return v
    }

    /// Read an optional `ApplicationDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ApplicationDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ApplicationDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ApplicationDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ApplicationDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ApplicationDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ApplicationDescriptor` - The value to write to the stream.
    func write(_ v: ApplicationDescriptor) {
        self.write(v.name)
        StringStringDictHelper.write(to: self, value: v.variables)
        ReplicaGroupDescriptorSeqHelper.write(to: self, value: v.replicaGroups)
        TemplateDescriptorDictHelper.write(to: self, value: v.serverTemplates)
        TemplateDescriptorDictHelper.write(to: self, value: v.serviceTemplates)
        NodeDescriptorDictHelper.write(to: self, value: v.nodes)
        self.write(v.distrib)
        self.write(v.description)
        PropertySetDescriptorDictHelper.write(to: self, value: v.propertySets)
    }

    /// Write an optional `ApplicationDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ApplicationDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ApplicationDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of application descriptors.
public typealias ApplicationDescriptorSeq = [ApplicationDescriptor]

/// Helper class to read and write `ApplicationDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ApplicationDescriptorSeqHelper {
    /// Read a `ApplicationDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ApplicationDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ApplicationDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 10)
        var v = ApplicationDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ApplicationDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ApplicationDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ApplicationDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ApplicationDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ApplicationDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ApplicationDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ApplicationDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ApplicationDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ApplicationDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ApplicationDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `BoxedString`.
public struct BoxedStringTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::BoxedString"]
    public static let staticId = "::IceGrid::BoxedString"
}

/// A node update descriptor to describe the updates to apply to a
/// node of a deployed application.
public class NodeUpdateDescriptor {
    /// The name of the node to update.
    public var name: Swift.String = ""
    /// The updated description (or null if the description wasn't
    /// updated.)
    public var description: BoxedString? = nil
    /// The variables to update.
    public var variables: StringStringDict = StringStringDict()
    /// The variables to remove.
    public var removeVariables: Ice.StringSeq = Ice.StringSeq()
    /// The property sets to update.
    public var propertySets: PropertySetDescriptorDict = PropertySetDescriptorDict()
    /// The property sets to remove.
    public var removePropertySets: Ice.StringSeq = Ice.StringSeq()
    /// The server instances to update.
    public var serverInstances: ServerInstanceDescriptorSeq = ServerInstanceDescriptorSeq()
    /// The servers which are not template instances to update.
    public var servers: ServerDescriptorSeq = ServerDescriptorSeq()
    /// The ids of the servers to remove.
    public var removeServers: Ice.StringSeq = Ice.StringSeq()
    /// The updated load factor of the node (or null if the load factor
    /// was not updated).
    public var loadFactor: BoxedString? = nil

    public init() {}

    public init(name: Swift.String, description: BoxedString?, variables: StringStringDict, removeVariables: Ice.StringSeq, propertySets: PropertySetDescriptorDict, removePropertySets: Ice.StringSeq, serverInstances: ServerInstanceDescriptorSeq, servers: ServerDescriptorSeq, removeServers: Ice.StringSeq, loadFactor: BoxedString?) {
        self.name = name
        self.description = description
        self.variables = variables
        self.removeVariables = removeVariables
        self.propertySets = propertySets
        self.removePropertySets = removePropertySets
        self.serverInstances = serverInstances
        self.servers = servers
        self.removeServers = removeServers
        self.loadFactor = loadFactor
    }
}

/// An `Ice.InputStream` extension to read `NodeUpdateDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `NodeUpdateDescriptor` structured value from the stream.
    ///
    /// - returns: `NodeUpdateDescriptor` - The structured value read from the stream.
    func read() throws -> NodeUpdateDescriptor {
        let v = NodeUpdateDescriptor()
        v.name = try self.read()
        try self.read(BoxedString.self) { v.description = $0 }
        v.variables = try StringStringDictHelper.read(from: self)
        v.removeVariables = try self.read()
        v.propertySets = try PropertySetDescriptorDictHelper.read(from: self)
        v.removePropertySets = try self.read()
        v.serverInstances = try ServerInstanceDescriptorSeqHelper.read(from: self)
        v.servers = try ServerDescriptorSeqHelper.read(from: self)
        v.removeServers = try self.read()
        try self.read(BoxedString.self) { v.loadFactor = $0 }
        return v
    }

    /// Read an optional `NodeUpdateDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NodeUpdateDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> NodeUpdateDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as NodeUpdateDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `NodeUpdateDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `NodeUpdateDescriptor` structured value to the stream.
    ///
    /// - parameter _: `NodeUpdateDescriptor` - The value to write to the stream.
    func write(_ v: NodeUpdateDescriptor) {
        self.write(v.name)
        self.write(v.description)
        StringStringDictHelper.write(to: self, value: v.variables)
        self.write(v.removeVariables)
        PropertySetDescriptorDictHelper.write(to: self, value: v.propertySets)
        self.write(v.removePropertySets)
        ServerInstanceDescriptorSeqHelper.write(to: self, value: v.serverInstances)
        ServerDescriptorSeqHelper.write(to: self, value: v.servers)
        self.write(v.removeServers)
        self.write(v.loadFactor)
    }

    /// Write an optional `NodeUpdateDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NodeUpdateDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: NodeUpdateDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of node update descriptors.
public typealias NodeUpdateDescriptorSeq = [NodeUpdateDescriptor]

/// Helper class to read and write `NodeUpdateDescriptorSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NodeUpdateDescriptorSeqHelper {
    /// Read a `NodeUpdateDescriptorSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NodeUpdateDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NodeUpdateDescriptorSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 10)
        var v = NodeUpdateDescriptorSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: NodeUpdateDescriptor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `NodeUpdateDescriptorSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NodeUpdateDescriptorSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NodeUpdateDescriptorSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NodeUpdateDescriptorSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NodeUpdateDescriptorSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NodeUpdateDescriptorSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `NodeUpdateDescriptorSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NodeUpdateDescriptorSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: NodeUpdateDescriptorSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `BoxedDistributionDescriptor`.
public struct BoxedDistributionDescriptorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::BoxedDistributionDescriptor"]
    public static let staticId = "::IceGrid::BoxedDistributionDescriptor"
}

/// An application update descriptor to describe the updates to apply
/// to a deployed application.
public class ApplicationUpdateDescriptor {
    /// The name of the application to update.
    public var name: Swift.String = ""
    /// The updated description (or null if the description wasn't
    /// updated.)
    public var description: BoxedString? = nil
    /// The updated distribution application descriptor.
    public var distrib: BoxedDistributionDescriptor? = nil
    /// The variables to update.
    public var variables: StringStringDict = StringStringDict()
    /// The variables to remove.
    public var removeVariables: Ice.StringSeq = Ice.StringSeq()
    /// The property sets to update.
    public var propertySets: PropertySetDescriptorDict = PropertySetDescriptorDict()
    /// The property sets to remove.
    public var removePropertySets: Ice.StringSeq = Ice.StringSeq()
    /// The replica groups to update.
    public var replicaGroups: ReplicaGroupDescriptorSeq = ReplicaGroupDescriptorSeq()
    /// The replica groups to remove.
    public var removeReplicaGroups: Ice.StringSeq = Ice.StringSeq()
    /// The server templates to update.
    public var serverTemplates: TemplateDescriptorDict = TemplateDescriptorDict()
    /// The ids of the server template to remove.
    public var removeServerTemplates: Ice.StringSeq = Ice.StringSeq()
    /// The service templates to update.
    public var serviceTemplates: TemplateDescriptorDict = TemplateDescriptorDict()
    /// The ids of the service template to remove.
    public var removeServiceTemplates: Ice.StringSeq = Ice.StringSeq()
    /// The application nodes to update.
    public var nodes: NodeUpdateDescriptorSeq = NodeUpdateDescriptorSeq()
    /// The nodes to remove.
    public var removeNodes: Ice.StringSeq = Ice.StringSeq()

    public init() {}

    public init(name: Swift.String, description: BoxedString?, distrib: BoxedDistributionDescriptor?, variables: StringStringDict, removeVariables: Ice.StringSeq, propertySets: PropertySetDescriptorDict, removePropertySets: Ice.StringSeq, replicaGroups: ReplicaGroupDescriptorSeq, removeReplicaGroups: Ice.StringSeq, serverTemplates: TemplateDescriptorDict, removeServerTemplates: Ice.StringSeq, serviceTemplates: TemplateDescriptorDict, removeServiceTemplates: Ice.StringSeq, nodes: NodeUpdateDescriptorSeq, removeNodes: Ice.StringSeq) {
        self.name = name
        self.description = description
        self.distrib = distrib
        self.variables = variables
        self.removeVariables = removeVariables
        self.propertySets = propertySets
        self.removePropertySets = removePropertySets
        self.replicaGroups = replicaGroups
        self.removeReplicaGroups = removeReplicaGroups
        self.serverTemplates = serverTemplates
        self.removeServerTemplates = removeServerTemplates
        self.serviceTemplates = serviceTemplates
        self.removeServiceTemplates = removeServiceTemplates
        self.nodes = nodes
        self.removeNodes = removeNodes
    }
}

/// An `Ice.InputStream` extension to read `ApplicationUpdateDescriptor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ApplicationUpdateDescriptor` structured value from the stream.
    ///
    /// - returns: `ApplicationUpdateDescriptor` - The structured value read from the stream.
    func read() throws -> ApplicationUpdateDescriptor {
        let v = ApplicationUpdateDescriptor()
        v.name = try self.read()
        try self.read(BoxedString.self) { v.description = $0 }
        try self.read(BoxedDistributionDescriptor.self) { v.distrib = $0 }
        v.variables = try StringStringDictHelper.read(from: self)
        v.removeVariables = try self.read()
        v.propertySets = try PropertySetDescriptorDictHelper.read(from: self)
        v.removePropertySets = try self.read()
        v.replicaGroups = try ReplicaGroupDescriptorSeqHelper.read(from: self)
        v.removeReplicaGroups = try self.read()
        v.serverTemplates = try TemplateDescriptorDictHelper.read(from: self)
        v.removeServerTemplates = try self.read()
        v.serviceTemplates = try TemplateDescriptorDictHelper.read(from: self)
        v.removeServiceTemplates = try self.read()
        v.nodes = try NodeUpdateDescriptorSeqHelper.read(from: self)
        v.removeNodes = try self.read()
        return v
    }

    /// Read an optional `ApplicationUpdateDescriptor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ApplicationUpdateDescriptor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ApplicationUpdateDescriptor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as ApplicationUpdateDescriptor
    }
}

/// An `Ice.OutputStream` extension to write `ApplicationUpdateDescriptor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ApplicationUpdateDescriptor` structured value to the stream.
    ///
    /// - parameter _: `ApplicationUpdateDescriptor` - The value to write to the stream.
    func write(_ v: ApplicationUpdateDescriptor) {
        self.write(v.name)
        self.write(v.description)
        self.write(v.distrib)
        StringStringDictHelper.write(to: self, value: v.variables)
        self.write(v.removeVariables)
        PropertySetDescriptorDictHelper.write(to: self, value: v.propertySets)
        self.write(v.removePropertySets)
        ReplicaGroupDescriptorSeqHelper.write(to: self, value: v.replicaGroups)
        self.write(v.removeReplicaGroups)
        TemplateDescriptorDictHelper.write(to: self, value: v.serverTemplates)
        self.write(v.removeServerTemplates)
        TemplateDescriptorDictHelper.write(to: self, value: v.serviceTemplates)
        self.write(v.removeServiceTemplates)
        NodeUpdateDescriptorSeqHelper.write(to: self, value: v.nodes)
        self.write(v.removeNodes)
    }

    /// Write an optional `ApplicationUpdateDescriptor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ApplicationUpdateDescriptor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ApplicationUpdateDescriptor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// :nodoc:
public class CommunicatorDescriptor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CommunicatorDescriptor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_CommunicatorDescriptor() -> Ice.ValueTypeResolver {
        return CommunicatorDescriptor_TypeResolver()
    }
}

/// A communicator descriptor.
open class CommunicatorDescriptor: Ice.Value {
    /// The object adapters.
    public var adapters: AdapterDescriptorSeq = AdapterDescriptorSeq()
    /// The property set.
    public var propertySet: PropertySetDescriptor = PropertySetDescriptor()
    /// The database environments.
    public var dbEnvs: DbEnvDescriptorSeq = DbEnvDescriptorSeq()
    /// The path of each log file.
    public var logs: Ice.StringSeq = Ice.StringSeq()
    /// A description of this descriptor.
    public var description: Swift.String = ""

    public required init() {}

    public init(adapters: AdapterDescriptorSeq, propertySet: PropertySetDescriptor, dbEnvs: DbEnvDescriptorSeq, logs: Ice.StringSeq, description: Swift.String) {
        self.adapters = adapters
        self.propertySet = propertySet
        self.dbEnvs = dbEnvs
        self.logs = logs
        self.description = description
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CommunicatorDescriptorTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CommunicatorDescriptorTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.adapters = try AdapterDescriptorSeqHelper.read(from: istr)
        self.propertySet = try istr.read()
        self.dbEnvs = try DbEnvDescriptorSeqHelper.read(from: istr)
        self.logs = try istr.read()
        self.description = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommunicatorDescriptorTraits.staticId, compactId: -1, last: true)
        AdapterDescriptorSeqHelper.write(to: ostr, value: self.adapters)
        ostr.write(self.propertySet)
        DbEnvDescriptorSeqHelper.write(to: ostr, value: self.dbEnvs)
        ostr.write(self.logs)
        ostr.write(self.description)
        ostr.endSlice()
    }
}

/// :nodoc:
public class ServerDescriptor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return ServerDescriptor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_ServerDescriptor() -> Ice.ValueTypeResolver {
        return ServerDescriptor_TypeResolver()
    }
}

/// An Ice server descriptor.
open class ServerDescriptor: CommunicatorDescriptor {
    /// The server id.
    public var id: Swift.String = ""
    /// The path of the server executable.
    public var exe: Swift.String = ""
    /// The Ice version used by this server. This is only required if
    /// backward compatibility with servers using old Ice versions is
    /// needed (otherwise the registry will assume the server is using
    /// the same Ice version).
    /// For example "3.1.1", "3.2", "3.3.0".
    public var iceVersion: Swift.String = ""
    /// The path to the server working directory.
    public var pwd: Swift.String = ""
    /// The command line options to pass to the server executable.
    public var options: Ice.StringSeq = Ice.StringSeq()
    /// The server environment variables.
    public var envs: Ice.StringSeq = Ice.StringSeq()
    /// The server activation mode (possible values are "on-demand" or
    /// "manual").
    public var activation: Swift.String = ""
    /// The activation timeout (an integer value representing the
    /// number of seconds to wait for activation).
    public var activationTimeout: Swift.String = ""
    /// The deactivation timeout (an integer value representing the
    /// number of seconds to wait for deactivation).
    public var deactivationTimeout: Swift.String = ""
    /// Specifies if the server depends on the application
    /// distribution.
    public var applicationDistrib: Swift.Bool = false
    /// The distribution descriptor.
    public var distrib: DistributionDescriptor = DistributionDescriptor()
    /// Specifies if the server is allocatable.
    public var allocatable: Swift.Bool = false
    /// The user account used to run the server.
    public var user: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(adapters: AdapterDescriptorSeq, propertySet: PropertySetDescriptor, dbEnvs: DbEnvDescriptorSeq, logs: Ice.StringSeq, description: Swift.String, id: Swift.String, exe: Swift.String, iceVersion: Swift.String, pwd: Swift.String, options: Ice.StringSeq, envs: Ice.StringSeq, activation: Swift.String, activationTimeout: Swift.String, deactivationTimeout: Swift.String, applicationDistrib: Swift.Bool, distrib: DistributionDescriptor, allocatable: Swift.Bool, user: Swift.String) {
        self.id = id
        self.exe = exe
        self.iceVersion = iceVersion
        self.pwd = pwd
        self.options = options
        self.envs = envs
        self.activation = activation
        self.activationTimeout = activationTimeout
        self.deactivationTimeout = deactivationTimeout
        self.applicationDistrib = applicationDistrib
        self.distrib = distrib
        self.allocatable = allocatable
        self.user = user
        super.init(adapters: adapters, propertySet: propertySet, dbEnvs: dbEnvs, logs: logs, description: description)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return ServerDescriptorTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return ServerDescriptorTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.id = try istr.read()
        self.exe = try istr.read()
        self.iceVersion = try istr.read()
        self.pwd = try istr.read()
        self.options = try istr.read()
        self.envs = try istr.read()
        self.activation = try istr.read()
        self.activationTimeout = try istr.read()
        self.deactivationTimeout = try istr.read()
        self.applicationDistrib = try istr.read()
        self.distrib = try istr.read()
        self.allocatable = try istr.read()
        self.user = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ServerDescriptorTraits.staticId, compactId: -1, last: false)
        ostr.write(self.id)
        ostr.write(self.exe)
        ostr.write(self.iceVersion)
        ostr.write(self.pwd)
        ostr.write(self.options)
        ostr.write(self.envs)
        ostr.write(self.activation)
        ostr.write(self.activationTimeout)
        ostr.write(self.deactivationTimeout)
        ostr.write(self.applicationDistrib)
        ostr.write(self.distrib)
        ostr.write(self.allocatable)
        ostr.write(self.user)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class ServiceDescriptor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return ServiceDescriptor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_ServiceDescriptor() -> Ice.ValueTypeResolver {
        return ServiceDescriptor_TypeResolver()
    }
}

/// An IceBox service descriptor.
open class ServiceDescriptor: CommunicatorDescriptor {
    /// The service name.
    public var name: Swift.String = ""
    /// The entry point of the IceBox service.
    public var entry: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(adapters: AdapterDescriptorSeq, propertySet: PropertySetDescriptor, dbEnvs: DbEnvDescriptorSeq, logs: Ice.StringSeq, description: Swift.String, name: Swift.String, entry: Swift.String) {
        self.name = name
        self.entry = entry
        super.init(adapters: adapters, propertySet: propertySet, dbEnvs: dbEnvs, logs: logs, description: description)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return ServiceDescriptorTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return ServiceDescriptorTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.name = try istr.read()
        self.entry = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ServiceDescriptorTraits.staticId, compactId: -1, last: false)
        ostr.write(self.name)
        ostr.write(self.entry)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class IceBoxDescriptor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return IceBoxDescriptor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_IceBoxDescriptor() -> Ice.ValueTypeResolver {
        return IceBoxDescriptor_TypeResolver()
    }
}

/// An IceBox server descriptor.
open class IceBoxDescriptor: ServerDescriptor {
    /// The service instances.
    public var services: ServiceInstanceDescriptorSeq = ServiceInstanceDescriptorSeq()

    public required init() {
        super.init()
    }

    public init(adapters: AdapterDescriptorSeq, propertySet: PropertySetDescriptor, dbEnvs: DbEnvDescriptorSeq, logs: Ice.StringSeq, description: Swift.String, id: Swift.String, exe: Swift.String, iceVersion: Swift.String, pwd: Swift.String, options: Ice.StringSeq, envs: Ice.StringSeq, activation: Swift.String, activationTimeout: Swift.String, deactivationTimeout: Swift.String, applicationDistrib: Swift.Bool, distrib: DistributionDescriptor, allocatable: Swift.Bool, user: Swift.String, services: ServiceInstanceDescriptorSeq) {
        self.services = services
        super.init(adapters: adapters, propertySet: propertySet, dbEnvs: dbEnvs, logs: logs, description: description, id: id, exe: exe, iceVersion: iceVersion, pwd: pwd, options: options, envs: envs, activation: activation, activationTimeout: activationTimeout, deactivationTimeout: deactivationTimeout, applicationDistrib: applicationDistrib, distrib: distrib, allocatable: allocatable, user: user)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return IceBoxDescriptorTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return IceBoxDescriptorTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.services = try ServiceInstanceDescriptorSeqHelper.read(from: istr)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: IceBoxDescriptorTraits.staticId, compactId: -1, last: false)
        ServiceInstanceDescriptorSeqHelper.write(to: ostr, value: self.services)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class LoadBalancingPolicy_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return LoadBalancingPolicy.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_LoadBalancingPolicy() -> Ice.ValueTypeResolver {
        return LoadBalancingPolicy_TypeResolver()
    }
}

/// A base class for load balancing policies.
open class LoadBalancingPolicy: Ice.Value {
    /// The number of replicas that will be used to gather the
    /// endpoints of a replica group.
    public var nReplicas: Swift.String = ""

    public required init() {}

    public init(nReplicas: Swift.String) {
        self.nReplicas = nReplicas
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return LoadBalancingPolicyTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return LoadBalancingPolicyTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.nReplicas = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: LoadBalancingPolicyTraits.staticId, compactId: -1, last: true)
        ostr.write(self.nReplicas)
        ostr.endSlice()
    }
}

/// :nodoc:
public class RandomLoadBalancingPolicy_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return RandomLoadBalancingPolicy.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_RandomLoadBalancingPolicy() -> Ice.ValueTypeResolver {
        return RandomLoadBalancingPolicy_TypeResolver()
    }
}

/// Random load balancing policy.
open class RandomLoadBalancingPolicy: LoadBalancingPolicy {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return RandomLoadBalancingPolicyTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return RandomLoadBalancingPolicyTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: RandomLoadBalancingPolicyTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class OrderedLoadBalancingPolicy_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return OrderedLoadBalancingPolicy.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_OrderedLoadBalancingPolicy() -> Ice.ValueTypeResolver {
        return OrderedLoadBalancingPolicy_TypeResolver()
    }
}

/// Ordered load balancing policy.
open class OrderedLoadBalancingPolicy: LoadBalancingPolicy {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return OrderedLoadBalancingPolicyTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return OrderedLoadBalancingPolicyTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: OrderedLoadBalancingPolicyTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class RoundRobinLoadBalancingPolicy_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return RoundRobinLoadBalancingPolicy.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_RoundRobinLoadBalancingPolicy() -> Ice.ValueTypeResolver {
        return RoundRobinLoadBalancingPolicy_TypeResolver()
    }
}

/// Round robin load balancing policy.
open class RoundRobinLoadBalancingPolicy: LoadBalancingPolicy {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return RoundRobinLoadBalancingPolicyTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return RoundRobinLoadBalancingPolicyTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: RoundRobinLoadBalancingPolicyTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class AdaptiveLoadBalancingPolicy_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return AdaptiveLoadBalancingPolicy.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_AdaptiveLoadBalancingPolicy() -> Ice.ValueTypeResolver {
        return AdaptiveLoadBalancingPolicy_TypeResolver()
    }
}

/// Adaptive load balancing policy.
open class AdaptiveLoadBalancingPolicy: LoadBalancingPolicy {
    /// The load sample to use for the load balancing. The allowed
    /// values for this attribute are "1", "5" and "15", representing
    /// respectively the load average over the past minute, the past 5
    /// minutes and the past 15 minutes.
    public var loadSample: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(nReplicas: Swift.String, loadSample: Swift.String) {
        self.loadSample = loadSample
        super.init(nReplicas: nReplicas)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return AdaptiveLoadBalancingPolicyTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return AdaptiveLoadBalancingPolicyTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.loadSample = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: AdaptiveLoadBalancingPolicyTraits.staticId, compactId: -1, last: false)
        ostr.write(self.loadSample)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class BoxedString_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return BoxedString.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_BoxedString() -> Ice.ValueTypeResolver {
        return BoxedString_TypeResolver()
    }
}

/// A "boxed" string.
open class BoxedString: Ice.Value {
    /// The value of the boxed string.
    public var value: Swift.String = ""

    public required init() {}

    public init(value: Swift.String) {
        self.value = value
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return BoxedStringTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return BoxedStringTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.value = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BoxedStringTraits.staticId, compactId: -1, last: true)
        ostr.write(self.value)
        ostr.endSlice()
    }
}

/// :nodoc:
public class BoxedDistributionDescriptor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return BoxedDistributionDescriptor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_BoxedDistributionDescriptor() -> Ice.ValueTypeResolver {
        return BoxedDistributionDescriptor_TypeResolver()
    }
}

/// A "boxed" distribution descriptor.
open class BoxedDistributionDescriptor: Ice.Value {
    /// The value of the boxed distribution descriptor.
    public var value: DistributionDescriptor = DistributionDescriptor()

    public required init() {}

    public init(value: DistributionDescriptor) {
        self.value = value
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return BoxedDistributionDescriptorTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return BoxedDistributionDescriptorTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.value = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BoxedDistributionDescriptorTraits.staticId, compactId: -1, last: true)
        ostr.write(self.value)
        ostr.endSlice()
    }
}
