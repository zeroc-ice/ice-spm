//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Identity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation

/// The identity of an Ice object. In a proxy, an empty Identity.name denotes a nil
/// proxy. An identity with an empty Identity.name and a non-empty Identity.category
/// is illegal. You cannot add a servant with an empty name to the Active Servant Map.
public struct Identity: Swift.Hashable {
    /// The name of the Ice object.
    public var name: Swift.String = ""
    /// The Ice object category.
    public var category: Swift.String = ""

    public init() {}

    public init(name: Swift.String, category: Swift.String) {
        self.name = name
        self.category = category
    }
}

/// An `Ice.InputStream` extension to read `Identity` structured values from the stream.
public extension InputStream {
    /// Read a `Identity` structured value from the stream.
    ///
    /// - returns: `Identity` - The structured value read from the stream.
    func read() throws -> Identity {
        var v = Identity()
        v.name = try self.read()
        v.category = try self.read()
        return v
    }

    /// Read an optional `Identity?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `Identity?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> Identity? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as Identity
    }
}

/// An `Ice.OutputStream` extension to write `Identity` structured values from the stream.
public extension OutputStream {
    /// Write a `Identity` structured value to the stream.
    ///
    /// - parameter _: `Identity` - The value to write to the stream.
    func write(_ v: Identity) {
        self.write(v.name)
        self.write(v.category)
    }

    /// Write an optional `Identity?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `Identity?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: Identity?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A mapping between identities and Ice objects.
public typealias ObjectDict = [Identity: Disp?]

/// A sequence of identities.
public typealias IdentitySeq = [Identity]

/// Helper class to read and write `IdentitySeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IdentitySeqHelper {
    /// Read a `IdentitySeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IdentitySeq` - The sequence read from the stream.
    public static func read(from istr: InputStream) throws -> IdentitySeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = IdentitySeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Identity = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `IdentitySeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IdentitySeq` - The sequence read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> IdentitySeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IdentitySeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IdentitySeq` - The sequence value to write to the stream.
    public static func write(to ostr: OutputStream, value v: IdentitySeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `IdentitySeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IdentitySeq` The sequence value to write to the stream.
    public static func write(to ostr: OutputStream,  tag: Swift.Int32, value v: IdentitySeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}
