//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import PromiseKit

/// A dictionnary of strings to integers.
public typealias MXStringIntDict = [Swift.String: Swift.Int32]

/// Helper class to read and write `MXStringIntDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct MXStringIntDictHelper {
    /// Read a `MXStringIntDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `MXStringIntDict` - The dictionary read from the stream.
    public static func read(from istr: InputStream) throws -> MXStringIntDict {
        let sz = try Swift.Int(istr.readSize())
        var v = MXStringIntDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.Int32 = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `MXStringIntDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MXStringIntDict` - The dictionary read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> MXStringIntDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `MXStringIntDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `MXStringIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, value v: MXStringIntDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `MXStringIntDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MXStringIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, tag: Swift.Int32, value v: MXStringIntDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `MXMetrics`.
public struct MXMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::Metrics"
}

/// A structure to keep track of failures associated with a given
/// metrics.
public struct MXMetricsFailures {
    /// The identifier of the metrics object associated to the
    /// failures.
    public var id: Swift.String = ""
    /// The failures observed for this metrics.
    public var failures: MXStringIntDict = MXStringIntDict()

    public init() {}

    public init(id: Swift.String, failures: MXStringIntDict) {
        self.id = id
        self.failures = failures
    }
}

/// An `Ice.InputStream` extension to read `MXMetricsFailures` structured values from the stream.
public extension InputStream {
    /// Read a `MXMetricsFailures` structured value from the stream.
    ///
    /// - returns: `MXMetricsFailures` - The structured value read from the stream.
    func read() throws -> MXMetricsFailures {
        var v = MXMetricsFailures()
        v.id = try self.read()
        v.failures = try MXStringIntDictHelper.read(from: self)
        return v
    }

    /// Read an optional `MXMetricsFailures?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MXMetricsFailures?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> MXMetricsFailures? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as MXMetricsFailures
    }
}

/// An `Ice.OutputStream` extension to write `MXMetricsFailures` structured values from the stream.
public extension OutputStream {
    /// Write a `MXMetricsFailures` structured value to the stream.
    ///
    /// - parameter _: `MXMetricsFailures` - The value to write to the stream.
    func write(_ v: MXMetricsFailures) {
        self.write(v.id)
        MXStringIntDictHelper.write(to: self, value: v.failures)
    }

    /// Write an optional `MXMetricsFailures?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MXMetricsFailures?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: MXMetricsFailures?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of MetricsFailures.
public typealias MXMetricsFailuresSeq = [MXMetricsFailures]

/// Helper class to read and write `MXMetricsFailuresSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct MXMetricsFailuresSeqHelper {
    /// Read a `MXMetricsFailuresSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `MXMetricsFailuresSeq` - The sequence read from the stream.
    public static func read(from istr: InputStream) throws -> MXMetricsFailuresSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = MXMetricsFailuresSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: MXMetricsFailures = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `MXMetricsFailuresSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MXMetricsFailuresSeq` - The sequence read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> MXMetricsFailuresSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `MXMetricsFailuresSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `MXMetricsFailuresSeq` - The sequence value to write to the stream.
    public static func write(to ostr: OutputStream, value v: MXMetricsFailuresSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `MXMetricsFailuresSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MXMetricsFailuresSeq` The sequence value to write to the stream.
    public static func write(to ostr: OutputStream,  tag: Swift.Int32, value v: MXMetricsFailuresSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A metrics map is a sequence of metrics. We use a sequence here
/// instead of a map because the ID of the metrics is already included
/// in the Metrics class and using sequences of metrics objects is more
/// efficient than using dictionaries since lookup is not necessary.
public typealias MXMetricsMap = [MXMetrics?]

/// Helper class to read and write `MXMetricsMap` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct MXMetricsMapHelper {
    /// Read a `MXMetricsMap` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `MXMetricsMap` - The sequence read from the stream.
    public static func read(from istr: InputStream) throws -> MXMetricsMap {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = MXMetricsMap(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(MXMetrics.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `MXMetricsMap?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MXMetricsMap` - The sequence read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> MXMetricsMap? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `MXMetricsMap` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `MXMetricsMap` - The sequence value to write to the stream.
    public static func write(to ostr: OutputStream, value v: MXMetricsMap) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `MXMetricsMap?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MXMetricsMap` The sequence value to write to the stream.
    public static func write(to ostr: OutputStream,  tag: Swift.Int32, value v: MXMetricsMap?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// A metrics view is a dictionary of metrics map. The key of the
/// dictionary is the name of the metrics map.
public typealias MXMetricsView = [Swift.String: MXMetricsMap]

/// Helper class to read and write `MXMetricsView` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct MXMetricsViewHelper {
    /// Read a `MXMetricsView` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `MXMetricsView` - The dictionary read from the stream.
    public static func read(from istr: InputStream) throws -> MXMetricsView {
        let sz = try Swift.Int(istr.readSize())
        var v = MXMetricsView()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: MXMetricsMap = try MXMetricsMapHelper.read(from: istr)
            v[key] = value
        }
        return v
    }
    /// Read an optional `MXMetricsView?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MXMetricsView` - The dictionary read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> MXMetricsView? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `MXMetricsView` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `MXMetricsView` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, value v: MXMetricsView) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            MXMetricsMapHelper.write(to: ostr, value: value)
        }
    }

    /// Wite an optional `MXMetricsView?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MXMetricsView` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, tag: Swift.Int32, value v: MXMetricsView?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class MXUnknownMetricsView_TypeResolver: UserExceptionTypeResolver {
    public override func type() -> UserException.Type {
        return MXUnknownMetricsView.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_UnknownMetricsView() -> UserExceptionTypeResolver {
        return MXUnknownMetricsView_TypeResolver()
    }
}

/// Raised if a metrics view cannot be found.
open class MXUnknownMetricsView: UserException {
    public required init() {}

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IceMX::UnknownMetricsView"
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXUnknownMetricsView.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `MXMetricsAdmin`.
public struct MXMetricsAdminTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::MetricsAdmin"]
    public static let staticId = "::IceMX::MetricsAdmin"
}

/// Traits for Slice class `MXThreadMetrics`.
public struct MXThreadMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::Metrics", "::IceMX::ThreadMetrics"]
    public static let staticId = "::IceMX::ThreadMetrics"
}

/// Traits for Slice class `MXDispatchMetrics`.
public struct MXDispatchMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::DispatchMetrics", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::DispatchMetrics"
}

/// Traits for Slice class `MXChildInvocationMetrics`.
public struct MXChildInvocationMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::ChildInvocationMetrics"
}

/// Traits for Slice class `MXCollocatedMetrics`.
public struct MXCollocatedMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::CollocatedMetrics", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::CollocatedMetrics"
}

/// Traits for Slice class `MXRemoteMetrics`.
public struct MXRemoteMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics", "::IceMX::RemoteMetrics"]
    public static let staticId = "::IceMX::RemoteMetrics"
}

/// Traits for Slice class `MXInvocationMetrics`.
public struct MXInvocationMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::InvocationMetrics", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::InvocationMetrics"
}

/// Traits for Slice class `MXConnectionMetrics`.
public struct MXConnectionMetricsTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceMX::ConnectionMetrics", "::IceMX::Metrics"]
    public static let staticId = "::IceMX::ConnectionMetrics"
}

/// The metrics administrative facet interface. This interface allows
/// remote administrative clients to access metrics of an application
/// that enabled the Ice administrative facility and configured some
/// metrics views.
///
/// MXMetricsAdminPrx Methods:
///
///  - getMetricsViewNames: Get the names of enabled and disabled metrics.
///
///  - getMetricsViewNamesAsync: Get the names of enabled and disabled metrics.
///
///  - enableMetricsView: Enables a metrics view.
///
///  - enableMetricsViewAsync: Enables a metrics view.
///
///  - disableMetricsView: Disable a metrics view.
///
///  - disableMetricsViewAsync: Disable a metrics view.
///
///  - getMetricsView: Get the metrics objects for the given metrics view.
///
///  - getMetricsViewAsync: Get the metrics objects for the given metrics view.
///
///  - getMapMetricsFailures: Get the metrics failures associated with the given view and map.
///
///  - getMapMetricsFailuresAsync: Get the metrics failures associated with the given view and map.
///
///  - getMetricsFailures: Get the metrics failure associated for the given metrics.
///
///  - getMetricsFailuresAsync: Get the metrics failure associated for the given metrics.
public protocol MXMetricsAdminPrx: ObjectPrx {}

internal final class MXMetricsAdminPrxI: ObjectPrxI, MXMetricsAdminPrx {
    public override class func ice_staticId() -> Swift.String {
        return MXMetricsAdminTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MXMetricsAdminPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MXMetricsAdminPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: ObjectPrx, type: MXMetricsAdminPrx.Protocol, facet: Swift.String? = nil, context: Context? = nil) throws -> MXMetricsAdminPrx? {
    return try MXMetricsAdminPrxI.checkedCast(prx: prx, facet: facet, context: context) as MXMetricsAdminPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MXMetricsAdminPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MXMetricsAdminPrx` - A proxy with the requested type
public func uncheckedCast(prx: ObjectPrx, type: MXMetricsAdminPrx.Protocol, facet: Swift.String? = nil) -> MXMetricsAdminPrx {
    return MXMetricsAdminPrxI.uncheckedCast(prx: prx, facet: facet) as MXMetricsAdminPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MXMetricsAdminPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MXMetricsAdminPrx.Protocol) -> Swift.String {
    return MXMetricsAdminTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MXMetricsAdminPrx`.
public extension InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MXMetricsAdminPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MXMetricsAdminPrx?` - The extracted proxy
    func read(_ type: MXMetricsAdminPrx.Protocol) throws -> MXMetricsAdminPrx? {
        return try read() as MXMetricsAdminPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MXMetricsAdminPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MXMetricsAdminPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MXMetricsAdminPrx.Protocol) throws -> MXMetricsAdminPrx? {
        return try read(tag: tag) as MXMetricsAdminPrxI?
    }
}

/// The metrics administrative facet interface. This interface allows
/// remote administrative clients to access metrics of an application
/// that enabled the Ice administrative facility and configured some
/// metrics views.
///
/// MXMetricsAdminPrx Methods:
///
///  - getMetricsViewNames: Get the names of enabled and disabled metrics.
///
///  - getMetricsViewNamesAsync: Get the names of enabled and disabled metrics.
///
///  - enableMetricsView: Enables a metrics view.
///
///  - enableMetricsViewAsync: Enables a metrics view.
///
///  - disableMetricsView: Disable a metrics view.
///
///  - disableMetricsViewAsync: Disable a metrics view.
///
///  - getMetricsView: Get the metrics objects for the given metrics view.
///
///  - getMetricsViewAsync: Get the metrics objects for the given metrics view.
///
///  - getMapMetricsFailures: Get the metrics failures associated with the given view and map.
///
///  - getMapMetricsFailuresAsync: Get the metrics failures associated with the given view and map.
///
///  - getMetricsFailures: Get the metrics failure associated for the given metrics.
///
///  - getMetricsFailuresAsync: Get the metrics failure associated for the given metrics.
public extension MXMetricsAdminPrx {
    /// Get the names of enabled and disabled metrics.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq, disabledViews: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq` - The name of the enabled views.
    ///
    ///   - disabledViews: `StringSeq` - The names of the disabled views.
    func getMetricsViewNames(context: Context? = nil) throws -> (returnValue: StringSeq, disabledViews: StringSeq) {
        return try _impl._invoke(operation: "getMetricsViewNames",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 read: { istr in
                                     let iceP_disabledViews: StringSeq = try istr.read()
                                     let iceP_returnValue: StringSeq = try istr.read()
                                     return (iceP_returnValue, iceP_disabledViews)
                                 },
                                 context: context)
    }

    /// Get the names of enabled and disabled metrics.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeq, disabledViews: StringSeq)>` - The result of the operation
    func getMetricsViewNamesAsync(context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeq, disabledViews: StringSeq)> {
        return _impl._invokeAsync(operation: "getMetricsViewNames",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  read: { istr in
                                      let iceP_disabledViews: StringSeq = try istr.read()
                                      let iceP_returnValue: StringSeq = try istr.read()
                                      return (iceP_returnValue, iceP_disabledViews)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Enables a metrics view.
    ///
    /// - parameter _: `Swift.String` The metrics view name.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func enableMetricsView(_ iceP_name: Swift.String, context: Context? = nil) throws {
        try _impl._invoke(operation: "enableMetricsView",
                          mode: .Normal,
                          format: .SlicedFormat,
                          write: { ostr in
                              ostr.write(iceP_name)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as MXUnknownMetricsView {
                                  throw error
                              } catch is UserException {}
                          },
                          context: context)
    }

    /// Enables a metrics view.
    ///
    /// - parameter _: `Swift.String` The metrics view name.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func enableMetricsViewAsync(_ iceP_name: Swift.String, context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "enableMetricsView",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_name)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as MXUnknownMetricsView {
                                          throw error
                                      } catch is UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Disable a metrics view.
    ///
    /// - parameter _: `Swift.String` The metrics view name.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func disableMetricsView(_ iceP_name: Swift.String, context: Context? = nil) throws {
        try _impl._invoke(operation: "disableMetricsView",
                          mode: .Normal,
                          format: .SlicedFormat,
                          write: { ostr in
                              ostr.write(iceP_name)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as MXUnknownMetricsView {
                                  throw error
                              } catch is UserException {}
                          },
                          context: context)
    }

    /// Disable a metrics view.
    ///
    /// - parameter _: `Swift.String` The metrics view name.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func disableMetricsViewAsync(_ iceP_name: Swift.String, context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "disableMetricsView",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_name)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as MXUnknownMetricsView {
                                          throw error
                                      } catch is UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the metrics objects for the given metrics view. This
    /// returns a dictionnary of metric maps for each metrics class
    /// configured with the view. The timestamp allows the client to
    /// compute averages which are not dependent of the invocation
    /// latency for this operation.
    ///
    /// - parameter _: `Swift.String` The name of the metrics view.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: MXMetricsView, timestamp: Swift.Int64)`:
    ///
    ///   - returnValue: `MXMetricsView` - The metrics view data.
    ///
    ///   - timestamp: `Swift.Int64` - The local time of the process when the metrics
    /// object were retrieved.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMetricsView(_ iceP_view: Swift.String, context: Context? = nil) throws -> (returnValue: MXMetricsView, timestamp: Swift.Int64) {
        return try _impl._invoke(operation: "getMetricsView",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_view)
                                 },
                                 read: { istr in
                                     let iceP_timestamp: Swift.Int64 = try istr.read()
                                     let iceP_returnValue: MXMetricsView = try MXMetricsViewHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_timestamp)
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as MXUnknownMetricsView {
                                         throw error
                                     } catch is UserException {}
                                 },
                                 context: context)
    }

    /// Get the metrics objects for the given metrics view. This
    /// returns a dictionnary of metric maps for each metrics class
    /// configured with the view. The timestamp allows the client to
    /// compute averages which are not dependent of the invocation
    /// latency for this operation.
    ///
    /// - parameter _: `Swift.String` The name of the metrics view.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: MXMetricsView, timestamp: Swift.Int64)>` - The result of the operation
    func getMetricsViewAsync(_ iceP_view: Swift.String, context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: MXMetricsView, timestamp: Swift.Int64)> {
        return _impl._invokeAsync(operation: "getMetricsView",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_view)
                                  },
                                  read: { istr in
                                      let iceP_timestamp: Swift.Int64 = try istr.read()
                                      let iceP_returnValue: MXMetricsView = try MXMetricsViewHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_timestamp)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as MXUnknownMetricsView {
                                          throw error
                                      } catch is UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the metrics failures associated with the given view and map.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MXMetricsFailuresSeq` - The metrics failures associated with the map.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMapMetricsFailures(view iceP_view: Swift.String, map iceP_map: Swift.String, context: Context? = nil) throws -> MXMetricsFailuresSeq {
        return try _impl._invoke(operation: "getMapMetricsFailures",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_view)
                                     ostr.write(iceP_map)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MXMetricsFailuresSeq = try MXMetricsFailuresSeqHelper.read(from: istr)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as MXUnknownMetricsView {
                                         throw error
                                     } catch is UserException {}
                                 },
                                 context: context)
    }

    /// Get the metrics failures associated with the given view and map.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MXMetricsFailuresSeq>` - The result of the operation
    func getMapMetricsFailuresAsync(view iceP_view: Swift.String, map iceP_map: Swift.String, context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MXMetricsFailuresSeq> {
        return _impl._invokeAsync(operation: "getMapMetricsFailures",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_view)
                                      ostr.write(iceP_map)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MXMetricsFailuresSeq = try MXMetricsFailuresSeqHelper.read(from: istr)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as MXUnknownMetricsView {
                                          throw error
                                      } catch is UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Get the metrics failure associated for the given metrics.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter id: `Swift.String` The ID of the metrics.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MXMetricsFailures` - The metrics failures associated with the metrics.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMetricsFailures(view iceP_view: Swift.String, map iceP_map: Swift.String, id iceP_id: Swift.String, context: Context? = nil) throws -> MXMetricsFailures {
        return try _impl._invoke(operation: "getMetricsFailures",
                                 mode: .Normal,
                                 format: .SlicedFormat,
                                 write: { ostr in
                                     ostr.write(iceP_view)
                                     ostr.write(iceP_map)
                                     ostr.write(iceP_id)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MXMetricsFailures = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as MXUnknownMetricsView {
                                         throw error
                                     } catch is UserException {}
                                 },
                                 context: context)
    }

    /// Get the metrics failure associated for the given metrics.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter id: `Swift.String` The ID of the metrics.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MXMetricsFailures>` - The result of the operation
    func getMetricsFailuresAsync(view iceP_view: Swift.String, map iceP_map: Swift.String, id iceP_id: Swift.String, context: Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MXMetricsFailures> {
        return _impl._invokeAsync(operation: "getMetricsFailures",
                                  mode: .Normal,
                                  format: .SlicedFormat,
                                  write: { ostr in
                                      ostr.write(iceP_view)
                                      ostr.write(iceP_map)
                                      ostr.write(iceP_id)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MXMetricsFailures = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as MXUnknownMetricsView {
                                          throw error
                                      } catch is UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class MXMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_Metrics() -> ValueTypeResolver {
        return MXMetrics_TypeResolver()
    }
}

/// The base class for metrics. A metrics object represents a
/// collection of measurements associated to a given a system.
open class MXMetrics: Value {
    /// The metrics identifier.
    public var id: Swift.String = ""
    /// The total number of objects observed by this metrics. This includes
    /// the number of currently observed objects and the number of objects
    /// observed in the past.
    public var total: Swift.Int64 = 0
    /// The number of objects currently observed by this metrics.
    public var current: Swift.Int32 = 0
    /// The sum of the lifetime of each observed objects. This does not
    /// include the lifetime of objects which are currently observed,
    /// only the objects observed in the past.
    public var totalLifetime: Swift.Int64 = 0
    /// The number of failures observed.
    public var failures: Swift.Int32 = 0

    public required init() {}

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32) {
        self.id = id
        self.total = total
        self.current = current
        self.totalLifetime = totalLifetime
        self.failures = failures
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.id = try istr.read()
        self.total = try istr.read()
        self.current = try istr.read()
        self.totalLifetime = try istr.read()
        self.failures = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXMetricsTraits.staticId, compactId: -1, last: true)
        ostr.write(self.id)
        ostr.write(self.total)
        ostr.write(self.current)
        ostr.write(self.totalLifetime)
        ostr.write(self.failures)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MXThreadMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXThreadMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_ThreadMetrics() -> ValueTypeResolver {
        return MXThreadMetrics_TypeResolver()
    }
}

/// Provides information on the number of threads currently in use and
/// their activity.
open class MXThreadMetrics: MXMetrics {
    /// The number of threads which are currently performing socket
    /// read or writes.
    public var inUseForIO: Swift.Int32 = 0
    /// The number of threads which are currently calling user code
    /// (servant dispatch, AMI callbacks, etc).
    public var inUseForUser: Swift.Int32 = 0
    /// The number of threads which are currently performing other
    /// activities. These are all other that are not counted with
    /// inUseForUser or inUseForIO, such as DNS
    /// lookups, garbage collection).
    public var inUseForOther: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, inUseForIO: Swift.Int32, inUseForUser: Swift.Int32, inUseForOther: Swift.Int32) {
        self.inUseForIO = inUseForIO
        self.inUseForUser = inUseForUser
        self.inUseForOther = inUseForOther
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXThreadMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXThreadMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.inUseForIO = try istr.read()
        self.inUseForUser = try istr.read()
        self.inUseForOther = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXThreadMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.inUseForIO)
        ostr.write(self.inUseForUser)
        ostr.write(self.inUseForOther)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXDispatchMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXDispatchMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_DispatchMetrics() -> ValueTypeResolver {
        return MXDispatchMetrics_TypeResolver()
    }
}

/// Provides information on servant dispatch.
open class MXDispatchMetrics: MXMetrics {
    /// The number of dispatch that failed with a user exception.
    public var userException: Swift.Int32 = 0
    /// The size of the dispatch. This corresponds to the size of the
    /// marshalled input parameters.
    public var size: Swift.Int64 = 0
    /// The size of the dispatch reply. This corresponds to the size of
    /// the marshalled output and return parameters.
    public var replySize: Swift.Int64 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, userException: Swift.Int32, size: Swift.Int64, replySize: Swift.Int64) {
        self.userException = userException
        self.size = size
        self.replySize = replySize
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXDispatchMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXDispatchMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.userException = try istr.read()
        self.size = try istr.read()
        self.replySize = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXDispatchMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.userException)
        ostr.write(self.size)
        ostr.write(self.replySize)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXChildInvocationMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXChildInvocationMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_ChildInvocationMetrics() -> ValueTypeResolver {
        return MXChildInvocationMetrics_TypeResolver()
    }
}

/// Provides information on child invocations. A child invocation is
/// either remote (sent over an Ice connection) or collocated. An
/// invocation can have multiple child invocation if it is
/// retried. Child invocation metrics are embedded within
/// InvocationMetrics.
open class MXChildInvocationMetrics: MXMetrics {
    /// The size of the invocation. This corresponds to the size of the
    /// marshalled input parameters.
    public var size: Swift.Int64 = 0
    /// The size of the invocation reply. This corresponds to the size
    /// of the marshalled output and return parameters.
    public var replySize: Swift.Int64 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, size: Swift.Int64, replySize: Swift.Int64) {
        self.size = size
        self.replySize = replySize
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXChildInvocationMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXChildInvocationMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.size = try istr.read()
        self.replySize = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXChildInvocationMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.size)
        ostr.write(self.replySize)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXCollocatedMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXCollocatedMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_CollocatedMetrics() -> ValueTypeResolver {
        return MXCollocatedMetrics_TypeResolver()
    }
}

/// Provides information on invocations that are collocated. Collocated
/// metrics are embedded within InvocationMetrics.
open class MXCollocatedMetrics: MXChildInvocationMetrics {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXCollocatedMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXCollocatedMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXCollocatedMetricsTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXRemoteMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXRemoteMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_RemoteMetrics() -> ValueTypeResolver {
        return MXRemoteMetrics_TypeResolver()
    }
}

/// Provides information on invocations that are specifically sent over
/// Ice connections. Remote metrics are embedded within InvocationMetrics.
open class MXRemoteMetrics: MXChildInvocationMetrics {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXRemoteMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXRemoteMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXRemoteMetricsTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXInvocationMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXInvocationMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_InvocationMetrics() -> ValueTypeResolver {
        return MXInvocationMetrics_TypeResolver()
    }
}

/// Provide measurements for proxy invocations. Proxy invocations can
/// either be sent over the wire or be collocated.
open class MXInvocationMetrics: MXMetrics {
    /// The number of retries for the invocation(s).
    public var retry: Swift.Int32 = 0
    /// The number of invocations that failed with a user exception.
    public var userException: Swift.Int32 = 0
    /// The remote invocation metrics map.
    public var remotes: MXMetricsMap = MXMetricsMap()
    /// The collocated invocation metrics map.
    public var collocated: MXMetricsMap = MXMetricsMap()

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, retry: Swift.Int32, userException: Swift.Int32, remotes: MXMetricsMap, collocated: MXMetricsMap) {
        self.retry = retry
        self.userException = userException
        self.remotes = remotes
        self.collocated = collocated
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXInvocationMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXInvocationMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.retry = try istr.read()
        self.userException = try istr.read()
        self.remotes = try MXMetricsMapHelper.read(from: istr)
        self.collocated = try MXMetricsMapHelper.read(from: istr)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXInvocationMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.retry)
        ostr.write(self.userException)
        MXMetricsMapHelper.write(to: ostr, value: self.remotes)
        MXMetricsMapHelper.write(to: ostr, value: self.collocated)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MXConnectionMetrics_TypeResolver: ValueTypeResolver {
    public override func type() -> Value.Type {
        return MXConnectionMetrics.self
    }
}

public extension ClassResolver {
    @objc static func IceMX_ConnectionMetrics() -> ValueTypeResolver {
        return MXConnectionMetrics_TypeResolver()
    }
}

/// Provides information on the data sent and received over Ice
/// connections.
open class MXConnectionMetrics: MXMetrics {
    /// The number of bytes received by the connection.
    public var receivedBytes: Swift.Int64 = 0
    /// The number of bytes sent by the connection.
    public var sentBytes: Swift.Int64 = 0

    public required init() {
        super.init()
    }

    public init(id: Swift.String, total: Swift.Int64, current: Swift.Int32, totalLifetime: Swift.Int64, failures: Swift.Int32, receivedBytes: Swift.Int64, sentBytes: Swift.Int64) {
        self.receivedBytes = receivedBytes
        self.sentBytes = sentBytes
        super.init(id: id, total: total, current: current, totalLifetime: totalLifetime, failures: failures)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MXConnectionMetricsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MXConnectionMetricsTraits.staticId
    }

    open override func _iceReadImpl(from istr: InputStream) throws {
        _ = try istr.startSlice()
        self.receivedBytes = try istr.read()
        self.sentBytes = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: OutputStream) {
        ostr.startSlice(typeId: MXConnectionMetricsTraits.staticId, compactId: -1, last: false)
        ostr.write(self.receivedBytes)
        ostr.write(self.sentBytes)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `MXMetricsAdmin` servants.
public struct MXMetricsAdminDisp: Disp {
    public let servant: MXMetricsAdmin
    private static let defaultObject = ObjectI<MXMetricsAdminTraits>()

    public init(_ servant: MXMetricsAdmin) {
        self.servant = servant
    }

    public func dispatch(request: Request, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        request.startOver()
        switch current.operation {
        case "disableMetricsView":
            return try servant._iceD_disableMetricsView(incoming: request, current: current)
        case "enableMetricsView":
            return try servant._iceD_enableMetricsView(incoming: request, current: current)
        case "getMapMetricsFailures":
            return try servant._iceD_getMapMetricsFailures(incoming: request, current: current)
        case "getMetricsFailures":
            return try servant._iceD_getMetricsFailures(incoming: request, current: current)
        case "getMetricsView":
            return try servant._iceD_getMetricsView(incoming: request, current: current)
        case "getMetricsViewNames":
            return try servant._iceD_getMetricsViewNames(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MXMetricsAdminDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MXMetricsAdminDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MXMetricsAdminDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MXMetricsAdminDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The metrics administrative facet interface. This interface allows
/// remote administrative clients to access metrics of an application
/// that enabled the Ice administrative facility and configured some
/// metrics views.
public protocol MXMetricsAdmin {
    /// Get the names of enabled and disabled metrics.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq, disabledViews: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq` - The name of the enabled views.
    ///
    ///   - disabledViews: `StringSeq` - The names of the disabled views.
    func getMetricsViewNames(current: Current) throws -> (returnValue: StringSeq, disabledViews: StringSeq)

    /// Enables a metrics view.
    ///
    /// - parameter name: `Swift.String` The metrics view name.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func enableMetricsView(name: Swift.String, current: Current) throws

    /// Disable a metrics view.
    ///
    /// - parameter name: `Swift.String` The metrics view name.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func disableMetricsView(name: Swift.String, current: Current) throws

    /// Get the metrics objects for the given metrics view. This
    /// returns a dictionnary of metric maps for each metrics class
    /// configured with the view. The timestamp allows the client to
    /// compute averages which are not dependent of the invocation
    /// latency for this operation.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: MXMetricsView, timestamp: Swift.Int64)`:
    ///
    ///   - returnValue: `MXMetricsView` - The metrics view data.
    ///
    ///   - timestamp: `Swift.Int64` - The local time of the process when the metrics
    /// object were retrieved.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMetricsView(view: Swift.String, current: Current) throws -> (returnValue: MXMetricsView, timestamp: Swift.Int64)

    /// Get the metrics failures associated with the given view and map.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MXMetricsFailuresSeq` - The metrics failures associated with the map.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMapMetricsFailures(view: Swift.String, map: Swift.String, current: Current) throws -> MXMetricsFailuresSeq

    /// Get the metrics failure associated for the given metrics.
    ///
    /// - parameter view: `Swift.String` The name of the metrics view.
    ///
    /// - parameter map: `Swift.String` The name of the metrics map.
    ///
    /// - parameter id: `Swift.String` The ID of the metrics.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MXMetricsFailures` - The metrics failures associated with the metrics.
    ///
    /// - throws:
    ///
    ///   - UnknownMetricsView - Raised if the metrics view cannot be
    ///     found.
    func getMetricsFailures(view: Swift.String, map: Swift.String, id: Swift.String, current: Current) throws -> MXMetricsFailures
}

/// The metrics administrative facet interface. This interface allows
/// remote administrative clients to access metrics of an application
/// that enabled the Ice administrative facility and configured some
/// metrics views.
///
/// MXMetricsAdmin Methods:
///
///  - getMetricsViewNames: Get the names of enabled and disabled metrics.
///
///  - enableMetricsView: Enables a metrics view.
///
///  - disableMetricsView: Disable a metrics view.
///
///  - getMetricsView: Get the metrics objects for the given metrics view.
///
///  - getMapMetricsFailures: Get the metrics failures associated with the given view and map.
///
///  - getMetricsFailures: Get the metrics failure associated for the given metrics.
public extension MXMetricsAdmin {
    func _iceD_getMetricsViewNames(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        try inS.readEmptyParams()
        inS.setFormat(.SlicedFormat)

        let (iceP_returnValue, iceP_disabledViews) = try self.getMetricsViewNames(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_disabledViews)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_enableMetricsView(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        let iceP_name: Swift.String = try inS.read { istr in
            let iceP_name: Swift.String = try istr.read()
            return iceP_name
        }
        inS.setFormat(.SlicedFormat)

        try self.enableMetricsView(name: iceP_name, current: current)

        return inS.setResult()
    }

    func _iceD_disableMetricsView(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        let iceP_name: Swift.String = try inS.read { istr in
            let iceP_name: Swift.String = try istr.read()
            return iceP_name
        }
        inS.setFormat(.SlicedFormat)

        try self.disableMetricsView(name: iceP_name, current: current)

        return inS.setResult()
    }

    func _iceD_getMetricsView(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        let iceP_view: Swift.String = try inS.read { istr in
            let iceP_view: Swift.String = try istr.read()
            return iceP_view
        }
        inS.setFormat(.SlicedFormat)

        let (iceP_returnValue, iceP_timestamp) = try self.getMetricsView(view: iceP_view, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_timestamp)
            MXMetricsViewHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_getMapMetricsFailures(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        let (iceP_view, iceP_map): (Swift.String, Swift.String) = try inS.read { istr in
            let iceP_view: Swift.String = try istr.read()
            let iceP_map: Swift.String = try istr.read()
            return (iceP_view, iceP_map)
        }
        inS.setFormat(.SlicedFormat)

        let iceP_returnValue = try self.getMapMetricsFailures(view: iceP_view, map: iceP_map, current: current)

        return inS.setResult{ ostr in
            MXMetricsFailuresSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_getMetricsFailures(incoming inS: Incoming, current: Current) throws -> PromiseKit.Promise<OutputStream>? {
        let (iceP_view, iceP_map, iceP_id): (Swift.String, Swift.String, Swift.String) = try inS.read { istr in
            let iceP_view: Swift.String = try istr.read()
            let iceP_map: Swift.String = try istr.read()
            let iceP_id: Swift.String = try istr.read()
            return (iceP_view, iceP_map, iceP_id)
        }
        inS.setFormat(.SlicedFormat)

        let iceP_returnValue = try self.getMetricsFailures(view: iceP_view, map: iceP_map, id: iceP_id, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
