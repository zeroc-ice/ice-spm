//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `EndpointTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation

/// Determines the order in which the Ice run time uses the endpoints
/// in a proxy when establishing a connection.
public enum EndpointSelectionType: Swift.UInt8 {
    /// Random Random causes the endpoints to be arranged in a random order.
    case Random = 0
    /// Ordered Ordered forces the Ice run time to use the endpoints in the
    /// order they appeared in the proxy.
    case Ordered = 1
    public init() {
        self = .Random
    }
}

/// An `Ice.InputStream` extension to read `EndpointSelectionType` enumerated values from the stream.
public extension InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `EndpointSelectionType` - The enumarated value.
    func read() throws -> EndpointSelectionType {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 1)
        guard let val = EndpointSelectionType(rawValue: rawValue) else {
            throw MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `EndpointSelectionType` - The enumerated value.
    func read(tag: Swift.Int32) throws -> EndpointSelectionType? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as EndpointSelectionType
    }
}

/// An `Ice.OutputStream` extension to write `EndpointSelectionType` enumerated values to the stream.
public extension OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `EndpointSelectionType` - The enumerator to write.
    func write(_ v: EndpointSelectionType) {
        write(enum: v.rawValue, maxValue: 1)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `EndpointSelectionType` - The enumerator to write.
    func write(tag: Swift.Int32, value: EndpointSelectionType?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 1)
    }
}
